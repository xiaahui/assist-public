@GenModel(
	generateModelWizard="false", 
	generateExampleClass="false"
)

package ch.hilbri.assist.datamodel.result.mapping

import ch.hilbri.assist.datamodel.model.AssistModel
import java.util.HashMap

annotation "http://www.eclipse.org/emf/2002/GenModel" as GenModel

interface Comparable wraps Comparable<Result>{}

class Result extends Comparable, AssistModel {
	String								name
	contains Evaluation[0..1] 				evaluation
	
	op int compareTo(Result o) {
		val double diff = this ?. evaluation.totalScaledScore - o ?. evaluation.totalScaledScore;
		if (diff < 0.0)	return 1;
		if (diff > 0.0)	return -1;
		return 0;
	}
}

abstract class AbstractMetric  {
	String 			name
	int				weight
	boolean 		higherScoreIsBetter
	boolean 		builtIn = "false"
	op double 		computeAbsoluteScore(Result result)
}

type MetricScoreMap wraps HashMap<AbstractMetric, Double>

class Evaluation {

	MetricScoreMap					absoluteScores
	MetricScoreMap					scaledScores
	
	derived double					totalScaledScore get { 
		if ((scaledScores == null) || (scaledScores.keySet.size == 0)) return 0.0
		else scaledScores.values.reduce[i1, i2 | i1 + i2]
	}

	contains AbstractMetric[0..*] 	metricsUsed
}

