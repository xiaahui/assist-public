/**
 * generated by Xtext
 */
package ch.hilbri.assist.mappingdsl.ui.labeling;

import ch.hilbri.assist.datamodel.model.Application;
import ch.hilbri.assist.datamodel.model.ApplicationGroup;
import ch.hilbri.assist.datamodel.model.ApplicationOrApplicationGroup;
import ch.hilbri.assist.datamodel.model.AssistModel;
import ch.hilbri.assist.datamodel.model.Board;
import ch.hilbri.assist.datamodel.model.Box;
import ch.hilbri.assist.datamodel.model.CommunicationRelation;
import ch.hilbri.assist.datamodel.model.Compartment;
import ch.hilbri.assist.datamodel.model.Core;
import ch.hilbri.assist.datamodel.model.DislocalityRelation;
import ch.hilbri.assist.datamodel.model.DissimilarityRelation;
import ch.hilbri.assist.datamodel.model.HardwareArchitectureLevelType;
import ch.hilbri.assist.datamodel.model.Network;
import ch.hilbri.assist.datamodel.model.Processor;
import ch.hilbri.assist.datamodel.model.ProximityRelation;
import com.google.common.base.Objects;
import com.google.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
@SuppressWarnings("all")
public class MappingDSLLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public MappingDSLLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String text(final AssistModel model) {
    String _systemName = model.getSystemName();
    return ("System " + _systemName);
  }
  
  public String image(final AssistModel model) {
    return "outline_view_system_16x16.png";
  }
  
  public String text(final Compartment comp) {
    String _name = comp.getName();
    return ("Compartment " + _name);
  }
  
  public String image(final Compartment comp) {
    return "outline_view_compartment_16x16.png";
  }
  
  public String text(final Box box) {
    String _name = box.getName();
    return ("Box " + _name);
  }
  
  public String image(final Box box) {
    return "outline_view_box_16x16.png";
  }
  
  public String text(final Board b) {
    String _name = b.getName();
    return ("Board " + _name);
  }
  
  public String image(final Board b) {
    return "outline_view_board_16x16.png";
  }
  
  public String text(final Processor p) {
    String _name = p.getName();
    return ("Processor " + _name);
  }
  
  public String image(final Processor p) {
    return "outline_view_processor_16x16.png";
  }
  
  public String text(final Core c) {
    String _name = c.getName();
    return ("Core " + _name);
  }
  
  public String image(final Core c) {
    return "outline_view_core_16x16.png";
  }
  
  public String text(final Application a) {
    String _name = a.getName();
    return ("Application " + _name);
  }
  
  public String image(final Application a) {
    return "outline_view_application2_16x16.png";
  }
  
  public String text(final DislocalityRelation r) {
    final StringBuilder output = new StringBuilder();
    output.append("[");
    EList<ApplicationOrApplicationGroup> _applicationsOrGroups = r.getApplicationsOrGroups();
    for (final ApplicationOrApplicationGroup aog : _applicationsOrGroups) {
      {
        if ((aog instanceof Application)) {
          String _name = ((Application) aog).getName();
          output.append(_name);
        }
        if ((aog instanceof ApplicationGroup)) {
          String _name_1 = ((ApplicationGroup) aog).getName();
          output.append(_name_1);
        }
        EList<ApplicationOrApplicationGroup> _applicationsOrGroups_1 = r.getApplicationsOrGroups();
        ApplicationOrApplicationGroup _last = IterableExtensions.<ApplicationOrApplicationGroup>last(_applicationsOrGroups_1);
        boolean _notEquals = (!Objects.equal(_last, aog));
        if (_notEquals) {
          output.append(", ");
        }
      }
    }
    output.append("]");
    output.append(" dislocal up to ");
    HardwareArchitectureLevelType _hardwareLevel = r.getHardwareLevel();
    output.append(_hardwareLevel);
    output.append("-level ");
    return output.toString();
  }
  
  public String image(final DislocalityRelation r) {
    return "outline_view_relation_16x16.png";
  }
  
  public String text(final DissimilarityRelation r) {
    final StringBuilder output = new StringBuilder();
    output.append("[");
    EList<ApplicationOrApplicationGroup> _applicationsOrGroups = r.getApplicationsOrGroups();
    for (final ApplicationOrApplicationGroup aog : _applicationsOrGroups) {
      {
        if ((aog instanceof Application)) {
          String _name = ((Application) aog).getName();
          output.append(_name);
        }
        if ((aog instanceof ApplicationGroup)) {
          String _name_1 = ((ApplicationGroup) aog).getName();
          output.append(_name_1);
        }
        EList<ApplicationOrApplicationGroup> _applicationsOrGroups_1 = r.getApplicationsOrGroups();
        ApplicationOrApplicationGroup _last = IterableExtensions.<ApplicationOrApplicationGroup>last(_applicationsOrGroups_1);
        boolean _notEquals = (!Objects.equal(_last, aog));
        if (_notEquals) {
          output.append(", ");
        }
      }
    }
    output.append("]");
    output.append(" dissimilar ");
    return output.toString();
  }
  
  public String image(final DissimilarityRelation r) {
    return "outline_view_relation_16x16.png";
  }
  
  public String text(final ProximityRelation r) {
    final StringBuilder output = new StringBuilder();
    output.append("[");
    EList<ApplicationOrApplicationGroup> _applicationsOrGroups = r.getApplicationsOrGroups();
    for (final ApplicationOrApplicationGroup aog : _applicationsOrGroups) {
      {
        if ((aog instanceof Application)) {
          String _name = ((Application) aog).getName();
          output.append(_name);
        }
        if ((aog instanceof ApplicationGroup)) {
          String _name_1 = ((ApplicationGroup) aog).getName();
          output.append(_name_1);
        }
        EList<ApplicationOrApplicationGroup> _applicationsOrGroups_1 = r.getApplicationsOrGroups();
        ApplicationOrApplicationGroup _last = IterableExtensions.<ApplicationOrApplicationGroup>last(_applicationsOrGroups_1);
        boolean _notEquals = (!Objects.equal(_last, aog));
        if (_notEquals) {
          output.append(", ");
        }
      }
    }
    output.append("]");
    output.append(" on same ");
    HardwareArchitectureLevelType _hardwareLevel = r.getHardwareLevel();
    output.append(_hardwareLevel);
    output.append(" ");
    return output.toString();
  }
  
  public String image(final ProximityRelation r) {
    return "outline_view_relation_16x16.png";
  }
  
  public String text(final CommunicationRelation r) {
    EList<ApplicationOrApplicationGroup> _applicationsOrGroups = r.getApplicationsOrGroups();
    String _plus = (_applicationsOrGroups + " with bandwidth ");
    int _bandwidthUtilization = r.getBandwidthUtilization();
    return (_plus + Integer.valueOf(_bandwidthUtilization));
  }
  
  public String image(final CommunicationRelation r) {
    return "outline_view_communication_16x16.png";
  }
  
  public String text(final Network n) {
    String _name = n.getName();
    String _plus = (_name + " connects ");
    EList<Board> _boards = n.getBoards();
    return (_plus + _boards);
  }
  
  public String image(final Network n) {
    return "outline_view_network_16x16.png";
  }
  
  public String text(final ApplicationGroup g) {
    String _name = g.getName();
    String _plus = (_name + " contains ");
    EList<ApplicationOrApplicationGroup> _applicationsOrGroups = g.getApplicationsOrGroups();
    return (_plus + _applicationsOrGroups);
  }
  
  public String image(final ApplicationGroup g) {
    return "outline_view_application_group_16x16.png";
  }
}
