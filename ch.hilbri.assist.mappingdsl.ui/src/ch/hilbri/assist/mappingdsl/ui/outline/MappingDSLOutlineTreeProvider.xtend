/*
* generated by Xtext
*/
package ch.hilbri.assist.mappingdsl.ui.outline

import ch.hilbri.assist.datamodel.model.AssistModel
import org.eclipse.core.runtime.FileLocator
import org.eclipse.core.runtime.Path
import org.eclipse.core.runtime.Platform
import org.eclipse.jface.resource.ImageDescriptor
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider

/**
 * Customization of the default outline structure.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
class MappingDSLOutlineTreeProvider extends DefaultOutlineTreeProvider {
	
	
	def _createChildren(IOutlineNode parentNode, AssistModel model) {
		
		val bundle = Platform.getBundle("ch.hilbri.assist.mappingdsl.ui");
		val imgfolderDesc = ImageDescriptor.createFromURL(FileLocator.find(bundle, new Path("icons/outlineview_folder_16x16.png"), null));
		val imgsubfolderDesc = ImageDescriptor.createFromURL(FileLocator.find(bundle, new Path("icons/outlineview_subfolder_16x16.png"), null));
		
		/* ---------- COMPARTMENTS ------------- */
		val compartmentsNode = new VirtualOutlineNode(parentNode, imgfolderDesc , "Compartments", false)
		for (compartment : model.compartmentsBlock.compartments)
			createNode(compartmentsNode, compartment)
		
		/* ---------- INTERFACES AND GROUPS --------- */
		val interfaceNode = new VirtualOutlineNode(parentNode, imgfolderDesc, "Interfaces", false)
		for (iface : model?.interfacesBlock?.eqInterfaces) 
				createNode(interfaceNode, iface)
		
		if (model.interfaceGroupsBlock != null && !model.interfaceGroupsBlock.eqInterfaceGroups.empty) {
			val interfaceGroupNode = new VirtualOutlineNode(parentNode, imgfolderDesc, "Interface Groups", false)
			for (group : model.interfaceGroupsBlock.eqInterfaceGroups)
				createNode(interfaceGroupNode, group)
		}
		
		/* --------- RESTRICTION CONSTRAINTS -------------- */
		if (model.restrictionsBlock != null && (!model.restrictionsBlock.dislocalityRelations.empty || !model.restrictionsBlock.colocalityRelations.empty || !model.restrictionsBlock.validDeployments.empty || !model.restrictionsBlock.invalidDeployments.empty)) {
			val restrictionsNode = new VirtualOutlineNode(parentNode, imgfolderDesc, "Restrictions", false)

			if (!model.restrictionsBlock.dislocalityRelations.empty) {		
				val dislocalRelationNode = new VirtualOutlineNode(restrictionsNode, imgsubfolderDesc, "Dislocality", false)
				for (r : model.restrictionsBlock.dislocalityRelations) createNode(dislocalRelationNode, r)
			}
			
			if (!model.restrictionsBlock.colocalityRelations.empty) {		
				val dissimRelationNode = new VirtualOutlineNode(restrictionsNode, imgsubfolderDesc, "Colocality", false)
				for (r : model.restrictionsBlock.colocalityRelations) createNode(dissimRelationNode, r)
			}
			
			if (!model.restrictionsBlock.validDeployments.empty) {		
				val validDeploymentsNode = new VirtualOutlineNode(restrictionsNode, imgsubfolderDesc, "Valid deployments", false)
				for (r : model.restrictionsBlock.validDeployments) createNode(validDeploymentsNode, r)
			}
			
			if (!model.restrictionsBlock.invalidDeployments.empty) {		
				val invalidDeploymentsNode = new VirtualOutlineNode(restrictionsNode, imgsubfolderDesc, "Invalid deployments", false)
				for (r : model.restrictionsBlock.invalidDeployments) createNode(invalidDeploymentsNode, r)
			}
		}
	}
}

