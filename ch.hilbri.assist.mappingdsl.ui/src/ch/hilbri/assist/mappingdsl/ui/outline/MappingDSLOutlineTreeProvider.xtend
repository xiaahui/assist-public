/*
* generated by Xtext
*/
package ch.hilbri.assist.mappingdsl.ui.outline

import ch.hilbri.assist.datamodel.model.AssistModel
import org.eclipse.core.runtime.FileLocator
import org.eclipse.core.runtime.Path
import org.eclipse.core.runtime.Platform
import org.eclipse.jface.resource.ImageDescriptor
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider

/**
 * Customization of the default outline structure.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
class MappingDSLOutlineTreeProvider extends DefaultOutlineTreeProvider {
	
	
	def _createChildren(IOutlineNode parentNode, AssistModel model) {
		
		val bundle = Platform.getBundle("ch.hilbri.assist.mappingdsl.ui");
		val imgfolderDesc = ImageDescriptor.createFromURL(FileLocator.find(bundle, new Path("icons/outline_view_folder_16x16.png"), null));
//		val imgsubfolderDesc = ImageDescriptor.createFromURL(FileLocator.find(bundle, new Path("icons/outline_view_subfolder_16x16.png"), null));
		
		/* ---------- HARDWARE ------------- */
		val compartmentsNode = new VirtualOutlineNode(parentNode, imgfolderDesc , "Compartments", false)
		for (compartment : model.compartments)
			createNode(compartmentsNode, compartment)
		
		/* ---------- APPLICATIONS AND GROUPS --------- */
		val interfaceNode = new VirtualOutlineNode(parentNode, imgfolderDesc, "Interfaces", false)
		for (iface : model.interfaces) 
			createNode(interfaceNode, iface)
		
		if (!model.interfaceGroups.empty) {
			val interfaceGroupNode = new VirtualOutlineNode(parentNode, imgfolderDesc, "Interface Groups", false)
			for (group : model.interfaceGroups)
				createNode(interfaceGroupNode, group)
		}
		
		/* --------- SAFETY CONSTRAINTS -------------- */
//		if (!model.dislocalityRelations.empty || !model.dissimilarityRelations.empty) {
//			val safetyRelationNode = new VirtualOutlineNode(parentNode, imgfolderDesc, "Safety", false)
//
//			if (!model.dislocalityRelations.empty) {		
//				val dislocalRelationNode = new VirtualOutlineNode(safetyRelationNode, imgsubfolderDesc, "Dislocality Constraints", false)
//				for (r : model.dislocalityRelations) createNode(dislocalRelationNode, r)
//			}
//
//			if (!model.dissimilarityRelations.empty) {		
//				val dissimRelationNode = new VirtualOutlineNode(safetyRelationNode, imgsubfolderDesc, "Dissimilarity Constraints", false)
//				for (r : model.dissimilarityRelations) createNode(dissimRelationNode, r)
//			}
//		}
		
		/* --------- NETWORKING ---------------------- */
//		if (!model.networks.empty || !model.communicationRelations.empty) {
//			val networkNode = new VirtualOutlineNode(parentNode, imgfolderDesc , "Networks and Communication", false)
//
//			if (!model.networks.empty) {
//				val physNetworksNode = new VirtualOutlineNode(networkNode, imgsubfolderDesc, "Physical Networks", false)
//				for (n : model.networks) createNode(physNetworksNode, n)
//			}
//
//			if (!model.communicationRelations.empty) {
//				val commRelationNode = new VirtualOutlineNode(networkNode, imgsubfolderDesc, "Logical Communication", false)
//				for (r : model.communicationRelations) createNode(commRelationNode, r)
//			}
//		}

		/* ---------- PROXIMITY REQUIREMENTS --------- */
//		if (!model.proximityRelations.empty) {
//			val proximityRelationNode = new VirtualOutlineNode(parentNode, imgfolderDesc, "Proximity", false)
//			for (r : model.proximityRelations) createNode(proximityRelationNode, r)
//		}
		
		
		
		
	}
	
}

