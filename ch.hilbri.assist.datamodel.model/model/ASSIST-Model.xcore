@GenModel(
	modelPluginID="ch.hilbri.assist.datamodel.model",
	editDirectory="/ch.hilbri.assist.datamodel.model.edit/src", 
	editPluginID="ch.hilbri.assist.datamodel.model.edit",
	editorDirectory="/ch.hilbri.assist.datamodel.model.editor/src", 
	editorPluginID="ch.hilbri.assist.datamodel.model.editor",
	generateModelWizard="false", 
	generateExampleClass="false" 
 )

package ch.hilbri.assist.datamodel.model

import org.eclipse.emf.common.util.BasicEList


annotation "http://www.eclipse.org/emf/2002/GenModel" as GenModel

class AssistModel {
	String 									name 				= ""

	contains Compartment[0..*]				compartments
	contains EqInterface[0..*]				eqInterfaces
	contains EqInterfaceGroup[0..*]			eqInterfaceGroups
	contains DislocalityRelation[0..*]		dislocalityRelations
	contains ColocalityRelation[0..*]		colocalityRelations
	contains ValidDeployment[0..*]			validDeployments
	contains InvalidDeployment[0..*]		invalidDeployments

	
	op Compartment[] getAllCompartments() {
		return compartments
	}
	
	op RDC[] getAllRDCs() {
		val list = new BasicEList<RDC>
		for (c : compartments)
			list.addAll(c.rdcs)
		return list
	}
	
	op Connector[] getAllConnectors() {
		val list = new BasicEList<Connector>
		for (r : allRDCs)
			list.addAll(r.connectors)
		return list
	}
	
	op HardwareElement[] getAllHardwareElements(int level) {
		if (level == 0) 		return allConnectors.map[it as HardwareElement]
		else if (level == 1)	return allRDCs.map[it as HardwareElement]
		else if (level == 2)	return compartments.map[it as HardwareElement]
		else return null
	}
	
}



class HardwareElement {
	 String name 			= ""
	 contains MetricParameter[0..*] metricParameters
}

class Compartment extends HardwareElement {
	String manufacturer	= ""
	String powerSupply		= ""
	String side				= ""
	String zone				= ""
	contains RDC[0..*] rdcs opposite compartment
	
	op String toString() 			{ name }
	
	op Connector[] getAllConnectors() {
		val list = new BasicEList<Connector>
		for (rdc : rdcs)
			list.addAll(rdc.connectors)		
		return list
	}
	
}

class RDC extends HardwareElement {
	String manufacturer	= ""
	String powerSupply		= ""
	String side				= ""
	String rdcType	 		= ""
	String ess				= ""
	container Compartment compartment opposite rdcs
	contains Connector[0..*] connectors opposite rdc
	op String toString() 			{ name }
}

class Connector extends HardwareElement {
	container RDC rdc opposite connectors
	contains AvailableEqInterface[0..*] 	availableEqInterfaces
	op String fullName() 			{ rdc.compartment.name + "." + rdc.name + "." + name }
}

class AvailableEqInterface {
	String eqInterfaceType 	= ""
	int count 				= "0"
}

class EqInterfaceOrGroup {
	String name = ""
	op String toString() { name }
}

class EqInterface extends EqInterfaceOrGroup {
	String system		= ""
	String subAta		= ""
	String resource		= ""
	String lineName		= ""
	String wiringLane	= ""
	String grpInfo		= ""
	String route		= ""
	String pwSup1		= ""
	String emhZone1		= ""
	String ioType		= ""

	refers Connector[0..1] 	mappedConnector
	contains MetricParameter[0..*] metricParameters
	op String toString() { name }	
}

class EqInterfaceGroup extends EqInterfaceOrGroup {
	refers EqInterface[0..*] eqInterfaces
	contains ImplicitEqInterfaceGroupDefinition [0..*] implicitGroupDefinitions
	op String toString() { name }
}


class ImplicitEqInterfaceGroupDefinition {
	contains ImplicitEqInterfaceGroupDefinitionAttributesAndValues[1..*] entries
}


class ImplicitEqInterfaceGroupDefinitionAttributesAndValues {
	ImplicitEqInterfaceGroupDefinitionAttribute attribute
	String					 			value
}

enum ImplicitEqInterfaceGroupDefinitionAttribute {
	NAME		as 	"Name"
	SYSTEM 		as 	"InterfaceSystem"
	SUBATA		as 	"SubAta"
	RESOURCE	as 	"Resource"
	LINENAME	as 	"LineName"
	WIRINGLANE	as 	"WiringLane"
	GRPINFO		as 	"GrpInfo"
	ROUTE		as 	"Route"
	PWSUP1		as 	"PwSup1"
	EMHZONE1	as 	"EmhZone1"
	IOTYPE		as 	"IoType"
}

class EqInterfaceGroupWithCombinedDefinition extends EqInterfaceGroup {
	refers EqInterfaceGroup [1..*] combinedGroups
}


class MetricParameter {
	String name = ""
	int value = "0"
}


/*** RELATIONS  ****/

enum HardwareArchitectureLevelType {
	CONNECTOR 	as "Connector"
	RDC		  	as "RDC"
	COMPARTMENT as "Compartment"
}

class DislocalityRelation{
	refers EqInterfaceOrGroup[1..*] eqInterfaceOrGroups
	HardwareArchitectureLevelType hardwareLevel
	
	op EqInterface[] getAllInterfaces() {
		val list = new BasicEList<EqInterface>
		
		for (e : eqInterfaceOrGroups) {
			if (e instanceof EqInterface) 				list.add(e)
			else if (e instanceof EqInterfaceGroup) 	list.addAll(e.eqInterfaces)
		}

		return list
	}
	
	op int getTotalInterfaceCount() {
		var counter = 0
		
		for (e : eqInterfaceOrGroups) {
			if (e instanceof EqInterface) 				counter += 1
			else if (e instanceof EqInterfaceGroup) 	counter += e.eqInterfaces.length
		}
		
		return counter
	}
	
	op String getAllEqInterfaceOrGroupNames() {
		var String result = ""
		var boolean first = true
		
		for (e : eqInterfaceOrGroups) {
			if (!first) result += ", "
			else first = false
			
			if (e instanceof EqInterface) 		result += e.name
			if (e instanceof EqInterfaceGroup) 	result += e.name
		}	
		
		return result
	}
}

class ColocalityRelation {
	refers EqInterfaceOrGroup[1..*] eqInterfaceOrGroups
	HardwareArchitectureLevelType hardwareLevel
	
	op EqInterface[] getAllInterfaces() {
		val list = new BasicEList<EqInterface>
		
		for (e : eqInterfaceOrGroups) {
			if (e instanceof EqInterface) 				list.add(e)
			else if (e instanceof EqInterfaceGroup) 	list.addAll(e.eqInterfaces)
		}

		return list
	}
	
	op String getAllEqInterfaceOrGroupNames() {
		var String result = ""
		var boolean first = true
		
		for (e : eqInterfaceOrGroups) {
			if (!first) result += ", "
			else first = false
			
			if (e instanceof EqInterface) 		result += e.name
			if (e instanceof EqInterfaceGroup) 	result += e.name
		}	
		
		return result
	}
}


class DeploymentSpecification {
	refers EqInterfaceOrGroup[1..*] eqInterfaceOrGroups
	refers HardwareElement[0..*] hardwareElements
	
	op String getAllEqInterfaceOrGroupNames() {
		var String result = ""
		var boolean first = true
		
		for (e : eqInterfaceOrGroups) {
			if (!first) result += ", "
			else first = false
			
			if (e instanceof EqInterface) 		result += e.name
			if (e instanceof EqInterfaceGroup) 	result += e.name
		}	
		
		return result
	}
}


class ValidDeployment extends DeploymentSpecification {}

class ValidDeploymentImplicit extends ValidDeployment {
	contains DeploymentImplicitDefinition [1..*] definitions
}

class InvalidDeployment extends DeploymentSpecification {}

class InvalidDeploymentImplicit extends InvalidDeployment {
	contains DeploymentImplicitDefinition [1..*] definitions
}

class DeploymentImplicitDefinition {
	DeploymentImplicitDefinitionAttribute 	attribute
	String					 					value
}

enum DeploymentImplicitDefinitionAttribute {
	RDC_NAME			as 	"RDC_NAME"
	RDC_MANUFACTURER	as 	"RDC_MANUFACTURER"
	RDC_POWERSUPPLY		as 	"RDC_POWERSUPPLY"
	RDC_SIDE			as 	"RDC_SIDE"
	RDC_TYPE			as 	"RDC_TYPE"
	RDC_ESS				as 	"RDC_ESS"
}
