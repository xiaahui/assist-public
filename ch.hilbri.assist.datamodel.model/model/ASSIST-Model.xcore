@GenModel(
	modelPluginID="ch.hilbri.assist.datamodel.model",
	editDirectory="/ch.hilbri.assist.datamodel.model.edit/src", 
	editPluginID="ch.hilbri.assist.datamodel.model.edit",
	editorDirectory="/ch.hilbri.assist.datamodel.model.editor/src", 
	editorPluginID="ch.hilbri.assist.datamodel.model.editor",
	generateModelWizard="false", 
	generateExampleClass="false" 
 )

package ch.hilbri.assist.datamodel.model

import org.eclipse.emf.common.util.BasicEList

annotation "http://www.eclipse.org/emf/2002/GenModel" as GenModel

class AssistModel {
	String 									systemName 				= ""

	contains Compartment[0..*]				compartments
	contains EqInterface[0..*]				eqInterfaces
	contains EqInterfaceGroup[0..*]			eqInterfaceGroups
	contains DislocalityRelation[0..*]		dislocalityRelations
	contains ColocalityRelation[0..*]		colocalityRelations
	contains ValidDeployment[0..*]			validDeployments
	contains InvalidDeployment[0..*]		invalidDeployments
	
	op EqInterface[] getAllEqInterfaces() {
		return eqInterfaces
	}
	
	op Compartment[] getAllCompartments() {
		return compartments
	}
	
	op RDC[] getAllRDCs() {
		val list = new BasicEList<RDC>
		for (c : compartments)
			list.addAll(c.rdcs)
		return list
	}
	
	op Connector[] getAllConnectors() {
		val list = new BasicEList<Connector>
		for (r : allRDCs)
			list.addAll(r.connectors)
		return list
	}
	
	op HardwareElement[] getAllHardwareElements(int level) {
		if (level == 0) 		return allConnectors.map[it as HardwareElement]
		else if (level == 1)	return allRDCs.map[it as HardwareElement]
		else if (level == 2)	return compartments.map[it as HardwareElement]
		else return null
	}
	
}



class HardwareElement {
	 String name 			= ""
	 contains MetricParameter[0..*] metricParameters
}

class Compartment extends HardwareElement {
	String manufacturer	= ""
	String powerSupply		= ""
	String side				= ""
	String zone				= ""
	contains RDC[0..*] rdcs opposite compartment
	
	op String toString() 			{ name }
	
	op Connector[] getAllConnectors() {
		val list = new BasicEList<Connector>
		for (rdc : rdcs)
			list.addAll(rdc.connectors)		
		return list
	}
	
}

class RDC extends HardwareElement {
	String manufacturer	= ""
	String powerSupply		= ""
	String side				= ""
	container Compartment compartment opposite rdcs
	String rdcType	 		= ""
	String ess				= ""
	contains Connector[0..*] connectors opposite rdc
	op String toString() 			{ name }
}

class Connector extends HardwareElement {
	container RDC rdc opposite connectors
	contains AvailableEqInterface[0..*] 	availableEqInterfaces
}

class AvailableEqInterface {
	String eqInterfaceType 	= ""
	int count 				= "0"
}

class EqInterfaceOrGroup {
	String name = ""
	op String toString() { name }
}

class EqInterface extends EqInterfaceOrGroup {
	String system		= ""
	String subAta		= ""
	String resource		= ""
	String lineName		= ""
	String wiringLane	= ""
	String grpInfo		= ""
	String route		= ""
	String pwSup1		= ""
	String emhZone1		= ""
	String ioType		= ""

	refers Connector[0..1] 	mappedConnector
	contains MetricParameter[0..*] metricParameters
	op String toString() { name }	
}

class EqInterfaceGroup extends EqInterfaceOrGroup {
	refers EqInterface[0..*] eqInterfaces
	op String toString() { name }
}

class MetricParameter {
	String name = ""
	int value = "0"
}


/*** RELATIONS  ****/

enum HardwareArchitectureLevelType {
	CONNECTOR 	as "Connector"
	RDC		  	as "RDC"
	COMPARTMENT as "Compartment"
}

class DislocalityRelation{
	refers EqInterfaceGroup[0..1] eqInterfaceGroup
	refers EqInterface[0..*] eqInterfaces
	HardwareArchitectureLevelType hardwareLevel
}

class ColocalityRelation {
	refers EqInterfaceOrGroup[1..*] eqInterfaceOrGroups
	HardwareArchitectureLevelType hardwareLevel
	
	op String getAllEqInterfaceOrGroupNames() {
		var String result = ""
		var boolean first = true
		
		for (e : eqInterfaceOrGroups) {
			if (!first) result += ", "
			else first = false
			
			if (e instanceof EqInterface) 		result += e.name
			if (e instanceof EqInterfaceGroup) 	result += e.name
		}	
		
		return result
	}
}

class ValidDeployment {
	refers EqInterfaceOrGroup[1..*] eqInterfaceOrGroups
	refers HardwareElement[1..*] hardwareElements
	
	op String getAllEqInterfaceOrGroupNames() {
		var String result = ""
		var boolean first = true
		
		for (e : eqInterfaceOrGroups) {
			if (!first) result += ", "
			else first = false
			
			if (e instanceof EqInterface) 		result += e.name
			if (e instanceof EqInterfaceGroup) 	result += e.name
		}	
		
		return result
	}
}

class InvalidDeployment {
	refers EqInterfaceOrGroup[1..*] eqInterfaceOrGroups
	refers HardwareElement[1..*] hardwareElements
	
	op String getAllEqInterfaceOrGroupNames() {
		var String result = ""
		var boolean first = true
		
		for (e : eqInterfaceOrGroups) {
			if (!first) result += ", "
			else first = false
			
			if (e instanceof EqInterface) 		result += e.name
			if (e instanceof EqInterfaceGroup) 	result += e.name
		}	
		
		return result
	}
}