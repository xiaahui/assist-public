@GenModel(
	modelPluginID="ch.hilbri.assist.datamodel.model",
	editDirectory="/ch.hilbri.assist.datamodel.model.edit/src", 
	editPluginID="ch.hilbri.assist.datamodel.model.edit",
	editorDirectory="/ch.hilbri.assist.datamodel.model.editor/src", 
	editorPluginID="ch.hilbri.assist.datamodel.model.editor",
	generateModelWizard="false", 
	generateExampleClass="false" 
 )

package ch.hilbri.assist.datamodel.model

import org.eclipse.emf.common.util.BasicEList


annotation "http://www.eclipse.org/emf/2002/GenModel" as GenModel

class AssistModel {
	String 									systemName 				= ""

	contains Compartment[0..*]				compartments
	contains EqInterface[0..*]				eqInterfaces
	contains EqInterfaceGroup[0..*]			eqInterfaceGroups
	
	op EqInterface[] getAllEqInterfaces() {
		return eqInterfaces
	}
	
	op Compartment[] getAllCompartments() {
		return compartments
	}
	
	op RDC[] getAllRDCs() {
		val list = new BasicEList<RDC>
		for (c : compartments)
			list.addAll(c.rdcs)
		return list
	}
	
	op Connector[] getAllConnectors() {
		val list = new BasicEList<Connector>
		for (r : allRDCs)
			list.addAll(r.connectors)
		return list
	}	
}

class HardwareElement {
	 String name 			= ""
	 String manufacturer	= ""
	 String powerSupply		= ""
	 String side				= ""
	 contains MetricParameter[0..*] metricParameters
}

class Compartment extends HardwareElement {

	String zone				= ""
	contains RDC[0..*] rdcs opposite compartment
	op String toString() 			{ name }
}

class RDC extends HardwareElement {
	container Compartment compartment opposite rdcs
	String rdcType	 		= ""
	String ess				= ""
	contains Connector[0..*] connectors opposite rdc
	op String toString() 			{ name }
}

class Connector {
	String name				= ""
	container RDC rdc opposite connectors
	contains AvailableEqInterface[0..*] 	availableEqInterfaces
}

class AvailableEqInterface {
	EqInterfaceType eqInterfaceType
	int count = "0"
}


enum EqInterfaceType {
	NONE		as "None"
	CAN 		as "Can"
	ELB			as "Enhanced Local Bus"
	ETH			as "Ethernet"
	ANALOG 		as "Analog"
	DIGITAL		as "Digital"
	SERIAL		as "Serial"
	CUSTOM0		as "Custom Type 0"	
	CUSTOM1		as "Custom Type 1"
	CUSTOM2		as "Custom Type 2"
	CUSTOM3		as "Custom Type 3"
	CUSTOM4		as "Custom Type 4"
	CUSTOM5		as "Custom Type 5"	
	CUSTOM6		as "Custom Type 6"
	CUSTOM7		as "Custom Type 7"
	CUSTOM8		as "Custom Type 8"
	CUSTOM9		as "Custom Type 9"
	CUSTOM10	as "Custom Type 10"	
	CUSTOM11	as "Custom Type 11"
	CUSTOM12	as "Custom Type 12"
	CUSTOM13	as "Custom Type 13"
	CUSTOM14	as "Custom Type 14"
	CUSTOM15	as "Custom Type 15"	
	CUSTOM16	as "Custom Type 16"
	CUSTOM17	as "Custom Type 17"
	CUSTOM18	as "Custom Type 18"
	CUSTOM19	as "Custom Type 19"
	CUSTOM20	as "Custom Type 20"	
	CUSTOM21	as "Custom Type 21"
	CUSTOM22	as "Custom Type 22"
	CUSTOM23	as "Custom Type 23"
	CUSTOM24	as "Custom Type 24"
	CUSTOM25	as "Custom Type 25"	
	CUSTOM26	as "Custom Type 26"
	CUSTOM27	as "Custom Type 27"
	CUSTOM28	as "Custom Type 28"
	CUSTOM29	as "Custom Type 29"
	CUSTOM30	as "Custom Type 30"	
	CUSTOM31	as "Custom Type 31"
	CUSTOM32	as "Custom Type 32"
	CUSTOM33	as "Custom Type 33"
	CUSTOM34	as "Custom Type 34"
	CUSTOM35	as "Custom Type 35"	
	CUSTOM36	as "Custom Type 36"
	CUSTOM37	as "Custom Type 37"
	CUSTOM38	as "Custom Type 38"
	CUSTOM39	as "Custom Type 39"
}


class EqInterface {
	String name			= ""
	String system		= ""
	String subAta		= ""
	String resource		= ""
	String lineName		= ""
	String wiringLane	= ""
	String grpInfo		= ""
	String route		= ""
	String pwSup1		= ""
	String emhZone1		= ""
	
	EqInterfaceType ioType

	refers Connector[0..1] 	mappedConnector
		
	contains MetricParameter[0..*] metricParameters
	
	op String toString() { name }	
}

class EqInterfaceGroup {
	String name = ""
	refers EqInterface[0..*] eqInterfaces
}

class MetricParameter {
	String name = ""
	int value = "0"
}


/*** RELATIONS  ****/

/* class DissimilarityRelation {
	refers ApplicationOrApplicationGroup[1..*] applicationsOrGroups
	contains DissimilarityClause[1] dissimilarityClause
}

class DissimilarityClause {}

// OR
class DissimilarityDisjunction extends DissimilarityClause {
	contains DissimilarityClause[2..*] dissimilarityClauses
}

// AND
class DissimilarityConjunction extends DissimilarityClause  {
	contains DissimilarityClause[2..*] dissimilarityClauses
}

class DissimilarityEntry extends DissimilarityClause {
	
	derived HardwareArchitectureLevelType level get {
		if (compartmentAttribute != CompartmentAttributes.NONE)  HardwareArchitectureLevelType.COMPARTMENT
		else if (boxAttribute != BoxAttributes.NONE) 			 HardwareArchitectureLevelType.BOX
		else if (boardAttribute != BoardAttributes.NONE)		 HardwareArchitectureLevelType.BOARD
		else if (processorAttribute != ProcessorAttributes.NONE) HardwareArchitectureLevelType.PROCESSOR
		else null
	}
	
	CompartmentAttributes 	compartmentAttribute 	= "None"
	BoxAttributes 			boxAttribute			= "None"
	BoardAttributes 		boardAttribute			= "None"
	ProcessorAttributes 	processorAttribute		= "None"
}

enum CompartmentAttributes{
	NONE 			as "None"
	MANUFACTURER	as "Manufacturer"
	POWERSUPPLY		as "PowerSupply"
	SIDE			as "Side"
	ZONE			as "Zone"
}

enum BoxAttributes{
	NONE			as "None"
	MANUFACTURER	as "Manufacturer"	
}

enum BoardAttributes{
	NONE			as "None"
	MANUFACTURER	as "Manufacturer"
	POWERSUPPLY		as "PowerSupply"
	ASSURANCELEVEL	as "AssuranceLevel"
	BOARDTYPE		as "BoardType"
	SIDE			as "Side"
	ESS				as "ESS"
}

enum ProcessorAttributes{
	NONE			as "None"
	MANUFACTURER	as "Manufacturer"
	PROCESSORTYPE	as "ProcessorType"
}


class DislocalityRelation{
	refers ApplicationOrApplicationGroup[1..*] applicationsOrGroups
	HardwareArchitectureLevelType hardwareLevel
	
	op int getApplicationCount() {
		var ctr = 0
		for (aog : applicationsOrGroups) {
			if (aog instanceof Application) ctr++
			if (aog instanceof ApplicationGroup) ctr += aog.allApplications.size
		}
		
		return ctr
	}
}

class ProximityRelation{
	refers ApplicationOrApplicationGroup[1..*] applicationsOrGroups
	HardwareArchitectureLevelType hardwareLevel
}

*/


