grammar ch.hilbri.assist.scheduling.dsl.SchedulingDsl with org.eclipse.xtext.common.Terminals

import "ch.hilbri.assist.model" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/* MAIN MODEL */
AssistModel: 
     ( 'Global'       '{' 
                         (
                            properties+=SystemNameProperty                              |
                            properties+=MinHypPeriodLengthProperty                      |
                            properties+=TaskSwitchDelayProperty
                         )*
                                                                 '}'                        ) &
                                                                 
    ( 'Hardware'     '{' (compartments+=Compartment)+            '}'                        ) &
    
    ( 'Software'     '{' (applications+=Application)+            '}'                        ) &
    
    ( 'Restrictions' '{' 
                        (
                            schedulingRestrictions+=RestrictionFinishAtTheSameTime      |
                            schedulingRestrictions+=RestrictionStartAfterOtherFinished  |
                            schedulingRestrictions+=RestrictionStartAfterOtherStarted   |
                            schedulingRestrictions+=RestrictionStartAtTheSameTime       |
                            schedulingRestrictions+=RestrictionDisjointExecution
                        )*
                                                                 '}')?
;    


// Hardware Tree
Compartment: 
    'Compartment' name=ID '{'
        (   
            properties+=ManufacturerProperty            | 
            properties+=PowerSupplyProperty             |
            properties+=CustomIntProperty               |
            properties+=CustomStringProperty            |
            features+=Feature                           |
            boxes+=Box                                                                                                  
        )*
    '}'
;

Box:
    'Box' name=ID   '{'
        (
            properties+=ManufacturerProperty            |
            properties+=CustomIntProperty               |
            properties+=CustomStringProperty            |
            features+=Feature                           |
            boards+=Board
        )*
    '}'
;
    
Board:
    'Board' name=ID   '{'
        (
            properties+=ManufacturerProperty            |
            properties+=PowerSupplyProperty             |
            properties+=BoardTypeProperty               |
            properties+=RAMCapacityProperty             |
            properties+=ROMCapacityProperty             |
            properties+=DesignAssuranceLevelProperty    |
            properties+=CustomIntProperty               |
            properties+=CustomStringProperty            |
            features+=Feature                           |
            processors+=Processor  
        )*
    '}'
;

Processor:
    'Processor' name=ID   '{'
        (
            properties+=ManufacturerProperty            |
            properties+=ProcessorTypeProperty           |
            properties+=CustomIntProperty               |
            properties+=CustomStringProperty            |
            features+=Feature                           |
            cores+=Core
        )*
    '}';

Core:
    'Core' name=ID '{'
        (
            properties+=CoreCapacityProperty            |
            properties+=CoreArchitectureProperty        |
            properties+=CustomIntProperty               |
            properties+=CustomStringProperty            |
            features+=Feature                           
        )* 
    '}';

/* Features provide by the hardware */
Feature:
    FeatureSimple | FeatureSyncAccess | FeatureExclAccess;

FeatureSimple returns Feature:
    'Provides' shared?='shared' 'feature' name=STRING ';';

FeatureSyncAccess returns Feature:
    'Provides' shared?='shared' 'feature' name=STRING synchronizedAccess?='with' 'synchronized' 'access' ';';
    
FeatureExclAccess returns Feature:
    'Provides' units=INT 'of' 'exclusive' 'feature' name=STRING ';';

/* SOFTWARE */
Application:
    'Application' name=ID '{'
        (
            properties+=CriticalityLevelProperty    |
            properties+=DevelopedByProperty         |
            properties+=CustomIntProperty           |
            properties+=CustomStringProperty        |
            tasks+=Task                             |
            ('RestrictDeploymentTo' '{' 
                restrictMappingToHardwareElements+=[HardwareElement|QualifiedName] 
                (',' restrictMappingToHardwareElements+=[HardwareElement|QualifiedName])* 
            '}' ';' )                               
        )*
    '}';

Task:
    'Task' name=ID '{'
        (
            properties+=RAMUtilizationProperty                          |
            properties+=ROMUtilizationProperty                          |
            properties+=DurationProperty                                |
            properties+=PeriodProperty                                  |
            properties+=PeriodicityProperty                             |
            properties+=EarlyToleranceProperty                          |
            properties+=LateToleranceProperty                           |
            properties+=MaxStartTimeProperty                            |
            properties+=MaxEndTimeProperty                              |
            properties+=AddInitTimeProperty                             |
            properties+=SlicesProperty                                  |
            properties+=MinSliceDurationProperty                        |
            properties+=ColorProperty                                   |
            properties+=AssignedCoreProperty                            |
            properties+=CustomIntProperty                               |
            properties+=CustomStringProperty                            |
            featureRequirements+=FeatureRequirement                     
        )*
    '}';


/* General Feature Requirements - see #38 */
FeatureRequirement: 
    SharedFeatureRequirement      |
    ExclusiveFeatureRequirement;

SharedFeatureRequirement returns FeatureRequirement:
    'Requires' shared?='shared' hardwareLevel=HardwareArchitectureLevelType 'feature' name=STRING ';';

ExclusiveFeatureRequirement returns FeatureRequirement:
    'Requires' units=INT 'of' 'exclusive' hardwareLevel=HardwareArchitectureLevelType 'feature' name=STRING ';';


/* Restrictions */
RestrictionStartAtTheSameTime:
    tasks+=[Task|QualifiedName] (',' tasks+=[Task|QualifiedName])+ 'start'  'at' 'the' 'same' 'time' ';' ;

RestrictionFinishAtTheSameTime:
    tasks+=[Task|QualifiedName] (',' tasks+=[Task|QualifiedName])+ 'finish' 'at' 'the' 'same' 'time' ';' ;

RestrictionStartAfterOtherFinished: 
    ( 
        (tasks+=[Task|QualifiedName]                                    'starts' 'after' otherTask=[Task|QualifiedName] 'has' 'finished') |
        (tasks+=[Task|QualifiedName] (',' tasks+=[Task|QualifiedName])+ 'start'  'after' otherTask=[Task|QualifiedName] 'has' 'finished')
    )
    (    'with' 'delay' 'of' 'at' 'least' delay=INT    )?
    ';'
;

RestrictionStartAfterOtherStarted: 
    ( 
        (tasks+=[Task|QualifiedName]                                    'starts' 'after' otherTask=[Task|QualifiedName] 'has' 'started') |
        (tasks+=[Task|QualifiedName] (',' tasks+=[Task|QualifiedName])+ 'start'  'after' otherTask=[Task|QualifiedName] 'has' 'started')
    )
    (   'with' 'delay' 'of' 'at' 'least' delay=INT   )?
    ';'
;

RestrictionDisjointExecution: 
    tasks+=[Task|QualifiedName] (',' tasks+=[Task|QualifiedName])+ 'require' 'disjoint' 'execution' ';' ;


/* ENUMS */
enum PeriodicityType:
    STRICT         = 'strict'         |
    FLEXIBLE       = 'flexible'
;


enum DesignAssuranceLevelType returns DesignAssuranceLevelType: 
    NONE  = 'None'     |
    QS    = 'QS'       |
    D     = 'D'        |
    C     = 'C'        |
    B     = 'B'        |
    A     = 'A'  
;

enum Color:           
    NONE            = 'none'               |
    BLACK           = 'black'              |
    BLUE            = 'blue'               |
    CYAN            = 'cyan'               |
    GRAY            = 'gray'               |
    GREEN           = 'green'              |
    MAGENTA         = 'magenta'            |
    RED             = 'red'                |
    WHITE           = 'white'              |
    YELLOW          = 'yellow'             |
    DARK_BLUE       = 'darkblue'           |
    DARK_CYAN       = 'darkcyan'           |
    DARK_GRAY       = 'darkgray'           |
    DARK_GREEN      = 'darkgreen'          |
    DARK_MAGENTA    = 'darkmagenta'        |
    DARK_RED        = 'darkred'            |
    DARK_YELLOW     = 'darkyellow'        
;

enum HardwareArchitectureLevelType:
    CORE         = 'Core'           |
    PROCESSOR    = 'Processor'      |
    BOARD        = 'Board'          |
    BOX          = 'Box'            |
    COMPARTMENT  = 'Compartment'
;

QualifiedName:
    ID ('.' ID)*
;

// Properties 
SystemNameProperty:             'System'                '=' value=STRING                    ';';
ManufacturerProperty:           'Manufacturer'          '=' value=STRING                    ';';
PowerSupplyProperty:            'PowerSupply'           '=' value=STRING                    ';';
BoardTypeProperty:              'Type'                  '=' value=STRING                    ';';
RAMCapacityProperty:            'RAM'                   '=' value=INT                       ';';
RAMUtilizationProperty:         'RequiredRAM'           '=' value=INT                       ';';
ROMCapacityProperty:            'ROM'                   '=' value=INT                       ';';
ROMUtilizationProperty:         'RequiredROM'           '=' value=INT                       ';';     
DesignAssuranceLevelProperty:   'DesignAssuranceLevel'  '=' value=DesignAssuranceLevelType  ';';
CriticalityLevelProperty:       'CriticalityLevel'      '=' value=DesignAssuranceLevelType  ';';
ProcessorTypeProperty:          'Type'                  '=' value=STRING                    ';';
CoreCapacityProperty:           'Capacity'              '=' value=INT                       ';';
CoreUtilizationProperty:        'CoreUtilization'       '=' value=INT                       ';';
CoreArchitectureProperty:       'Architecture'          '=' value=STRING                    ';';
DevelopedByProperty:            'Developer'             '=' value=STRING                    ';';
MinHypPeriodLengthProperty:     'MinimumHyperPeriod'    '=' value=INT                       ';';
TaskSwitchDelayProperty:        'TaskSwitchDelay'       '=' value=INT                       ';';
DurationProperty:               'Duration'              '=' value=INT                       ';';
PeriodProperty:                 'Period'                '=' value=INT                       ';';
PeriodicityProperty:            'Periodicity'           '=' value=PeriodicityType           ';';
EarlyToleranceProperty:         'EarlyTolerance'        '=' value=INT                       ';';
LateToleranceProperty:          'LateTolerance'         '=' value=INT                       ';';
MaxStartTimeProperty:           'MaxStartTime'          '=' value=INT                       ';';
MaxEndTimeProperty:             'MaxEndTime'            '=' value=INT                       ';';
AddInitTimeProperty:            'InitTime'              '=' value=INT                       ';';
SlicesProperty:                 'Slices'                '=' value=INT                       ';';
MinSliceDurationProperty:       'MinSliceDuration'      '=' value=INT                       ';';
ColorProperty:                  'Color'                 '=' value=Color                     ';';
AssignedCoreProperty:           'AssignedCore'          '=' value=[Core|QualifiedName]      ';'; 
CustomIntProperty:              'Custom' 'Property' name=STRING '=' value=INT               ';';
CustomStringProperty:           'Custom' 'Property' name=STRING '=' value=STRING            ';';