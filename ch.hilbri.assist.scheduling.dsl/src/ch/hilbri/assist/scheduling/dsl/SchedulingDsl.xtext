grammar ch.hilbri.assist.scheduling.dsl.SchedulingDsl with org.eclipse.xtext.common.Terminals

import "ch.hilbri.assist.scheduling.model" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AssistModelScheduling returns AssistModelScheduling:
	'AssistModelScheduling'
	'{'
		('systemName' systemName=EString)?
		'compartments' '{' compartments+=Compartment ( "," compartments+=Compartment)* '}' 
		'applications' '{' applications+=Application ( "," applications+=Application)* '}' 
	'}';






HardwareElement returns HardwareElement:
	HardwareElement_Impl | Compartment | Box | Board | Processor | Core;






EString returns ecore::EString:
	STRING | ID;

Compartment returns Compartment:
	'Compartment'
	name=EString
	'{'
		('manufacturer' manufacturer=EString)?
		('powerSupply' powerSupply=EString)?
		('metricParameters' '{' metricParameters+=MetricParameter ( "," metricParameters+=MetricParameter)* '}' )?
		'boxes' '{' boxes+=Box ( "," boxes+=Box)* '}' 
	'}';

Application returns Application:
	'Application'
	name=EString
	'{'
		('developedBy' developedBy=EString)?
		('criticalityLevel' criticalityLevel=DesignAssuranceLevelType)?
		('restrictMappingToHardwareElements' '(' restrictMappingToHardwareElements+=[HardwareElement|EString] ( "," restrictMappingToHardwareElements+=[HardwareElement|EString])* ')' )?
		'tasks' '{' tasks+=Task ( "," tasks+=Task)* '}' 
		('metricParameters' '{' metricParameters+=MetricParameter ( "," metricParameters+=MetricParameter)* '}' )?
	'}';

MetricParameter returns MetricParameter:
	{MetricParameter}
	'MetricParameter'
	name=EString
	'{'
		('value' value=EInt)?
	'}';

Box returns Box:
	{Box}
	'Box'
	name=EString
	'{'
		('manufacturer' manufacturer=EString)?
		('metricParameters' '{' metricParameters+=MetricParameter ( "," metricParameters+=MetricParameter)* '}' )?
		('boards' '{' boards+=Board ( "," boards+=Board)* '}' )?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

Board returns Board:
	'Board'
	name=EString
	'{'
		('manufacturer' manufacturer=EString)?
		('boardType' boardType=EString)?
		('powerSupply' powerSupply=EString)?
		('assuranceLevel' assuranceLevel=DesignAssuranceLevelType)?
		('ramCapacity' ramCapacity=EInt)?
		('romCapacity' romCapacity=EInt)?
		('metricParameters' '{' metricParameters+=MetricParameter ( "," metricParameters+=MetricParameter)* '}' )?
		'processors' '{' processors+=Processor ( "," processors+=Processor)* '}' 
		('ioAdapters' '{' ioAdapters+=IOAdapter ( "," ioAdapters+=IOAdapter)* '}' )?
	'}';

enum DesignAssuranceLevelType returns DesignAssuranceLevelType:
				NONE = 'NONE' | QS = 'QS' | D = 'D' | C = 'C' | B = 'B' | A = 'A';

Processor returns Processor:
	'Processor'
	name=EString
	'{'
		('manufacturer' manufacturer=EString)?
		('processorType' processorType=EString)?
		('metricParameters' '{' metricParameters+=MetricParameter ( "," metricParameters+=MetricParameter)* '}' )?
		'cores' '{' cores+=Core ( "," cores+=Core)* '}' 
	'}';

IOAdapter returns IOAdapter:
	{IOAdapter}
	'IOAdapter'
	name=EString
	'{'
		('totalCount' totalCount=EInt)?
		('adapterType' adapterType=IOAdapterType)?
	'}';

Core returns Core:
	{Core}
	'Core'
	name=EString
	'{'
		('manufacturer' manufacturer=EString)?
		('architecture' architecture=EString)?
		('capacity' capacity=EInt)?
		('metricParameters' '{' metricParameters+=MetricParameter ( "," metricParameters+=MetricParameter)* '}' )?
	'}';

enum IOAdapterType returns IOAdapterType:
				NONE = 'NONE' | CAN = 'CAN' | ELB = 'ELB' | ETH = 'ETH' | ANALOG = 'ANALOG' | DIGITAL = 'DIGITAL' | SERIAL = 'SERIAL';

Task returns Task:
	'Task'
	name=EString
	'{'
		('ramUtilization' ramUtilization=EInt)?
		('romUtilization' romUtilization=EInt)?
		('duration' duration=EInt)?
		('period' period=EInt)?
		('earlyTolerance' earlyTolerance=EInt)?
		('lateTolerance' lateTolerance=EInt)?
		('maxStartTime' maxStartTime=EInt)?
		('maxEndTime' maxEndTime=EInt)?
		('addInitTime' addInitTime=EInt)?
		('slices' slices=EInt)?
		('minSliceDuration' minSliceDuration=EInt)?
		'assignedCore' assignedCore=[Core|EString]
		('ioAdapterRequirements' '{' ioAdapterRequirements+=IOAdapterRequirement ( "," ioAdapterRequirements+=IOAdapterRequirement)* '}' )?
		('metricParameters' '{' metricParameters+=MetricParameter ( "," metricParameters+=MetricParameter)* '}' )?
	'}';

HardwareElement_Impl returns HardwareElement:
	{HardwareElement}
	'HardwareElement'
	name=EString
	'{'
		('manufacturer' manufacturer=EString)?
		('metricParameters' '{' metricParameters+=MetricParameter ( "," metricParameters+=MetricParameter)* '}' )?
	'}';

IOAdapterRequirement returns IOAdapterRequirement:
	{IOAdapterRequirement}
	(isSharedAllowed?='isSharedAllowed')?
	(isExclusiveOnly?='isExclusiveOnly')?
	'IOAdapterRequirement'
	'{'
		('adapterType' adapterType=IOAdapterType)?
		('requiredAdapterCount' requiredAdapterCount=EInt)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';
