grammar ch.hilbri.assist.scheduling.dsl.SchedulingDsl with org.eclipse.xtext.common.Terminals

import "ch.hilbri.assist.model" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AssistModel returns AssistModel:
    'Global'   '{' 
                    'System'                 '=' systemName=STRING          ';' 
                   ('MinimumHyperPeriod'     '=' minHypPeriodLength=INT     ';')?
                   ('TaskSwitchDelay'        '=' taskSwitchDelay=INT        ';')?
    '}'

    'Hardware' '{'    
                    (compartments+=Compartment)*
    '}'

    'Software' '{'
                    (applications+=Application)* 
    '}'
    
    ('Restrictions' '{' (
                          (
                            schedulingRestrictions+=RestrictionFinishAtTheSameTime      |
                            schedulingRestrictions+=RestrictionStartAfterOtherFinished  |
                            schedulingRestrictions+=RestrictionStartAfterOtherStarted   |
                            schedulingRestrictions+=RestrictionStartAtTheSameTime
                          )
                       )*
    '}')?
    ;


Compartment: 
    'Compartment' name=ID '{'
        ('Manufacturer'     '=' manufacturer=STRING  ';')?
        ('PowerSupply'      '=' powerSupply=STRING   ';')?
        (boxes+=Box)+
        ('Properties' '{' (customProperties+=CustomStringProperty | customProperties+=CustomIntProperty)* '}' )?
    '}'
;

Box:
    'Box' name=ID '{'
        ('Manufacturer'     '=' manufacturer=STRING ';')?
        (boards+=Board)*
        ('Properties' '{' (customProperties+=CustomStringProperty | customProperties+=CustomIntProperty)* '}' )?
    '}'
;
    
Board:
    'Board' name=ID '{'
        ('Manufacturer'             '=' manufacturer=STRING ';')?
        ('Type'                     '=' boardType=STRING ';')?
        ('PowerSupply'              '=' powerSupply=STRING ';')?
        ('DesignAssuranceLevel'     '=' assuranceLevel=DesignAssuranceLevelType';')?
        ('RAM'                      '=' ramCapacity=INT ';')?
        ('ROM'                      '=' romCapacity=INT ';')?
        (processors+=Processor)+
        ('Properties' '{' (customProperties+=CustomStringProperty | customProperties+=CustomIntProperty)* '}' )?
    '}'
;

Processor:
    'Processor' name=ID '{'
        ('Manufacturer'             '=' manufacturer=STRING ';')?
        ('Type'                     '=' processorType=STRING ';')?
        (cores+=Core)+
        ('Properties' '{' (customProperties+=CustomStringProperty | customProperties+=CustomIntProperty)* '}' )?
    '}';

Core:
    'Core' name=ID '{' 
        ('Capacity'                 '=' capacity=INT ';')?
        ('Architecture'             '=' architecture=STRING ';')?
        ('Properties' '{' (customProperties+=CustomStringProperty | customProperties+=CustomIntProperty)* '}' )?
    '}';


/* SOFTWARE */

Application:
    'Application' name=ID '{'
        ('CriticalityLevel'         '=' criticalityLevel=DesignAssuranceLevelType ';'    )?
        ('Developer'                '=' developedBy=STRING ';'                           )?
        (tasks+=Task)+
        ('Properties' '{' (customProperties+=CustomStringProperty | customProperties+=CustomIntProperty)* '}' )?
    '}';

Task:
    'Task' name=ID '{'
        ('RequiredRAM'               '=' ramUtilization=INT ';'                          )? 
        ('RequiredROM'               '=' romUtilization=INT ';'                          )? 
         'AssignedCore'              '=' assignedCore=[Core|QualifiedName] ';'
         'Duration'                  '=' duration=INT ';'
         'Period'                    '=' period=INT ';'
        ('Periodicity'               '=' periodicity=PeriodicityType ';'                 )? 
        ('EarlyTolerance'            '=' earlyTolerance=INT ';'                          )?
        ('LateTolerance'             '=' lateTolerance=INT ';'                           )?
        ('MaxStartTime'              '=' maxStartTime=INT ';'                            )?
        ('MaxEndTime'                '=' maxEndTime=INT ';'                              )?
        ('InitTime'                  '=' addInitTime=INT ';'                             )?
        ('Slices'                    '=' slices=INT ';'                                  )?
        ('MinSliceDuration'          '=' minSliceDuration=INT ';'                        )?
        ('Color'                     '=' color=Color ';'                                 )?
        ('Properties' '{' (customProperties+=CustomStringProperty | customProperties+=CustomIntProperty)* '}' )?
    '}';

enum Color:           
    NONE            = 'none'               |
    BLACK           = 'black'              |
    BLUE            = 'blue'               |
    CYAN            = 'cyan'               |
    GRAY            = 'gray'               |
    GREEN           = 'green'              |
    MAGENTA         = 'magenta'            |
    RED             = 'red'                |
    WHITE           = 'white'              |
    YELLOW          = 'yellow'             |
    DARK_BLUE       = 'darkblue'           |
    DARK_CYAN       = 'darkcyan'           |
    DARK_GRAY       = 'darkgray'           |
    DARK_GREEN      = 'darkgreen'          |
    DARK_MAGENTA    = 'darkmagenta'        |
    DARK_RED        = 'darkred'            |
    DARK_YELLOW     = 'darkyellow'        
;

/* Restrictions */
RestrictionStartAtTheSameTime:
    tasks+=[Task|QualifiedName] (',' tasks+=[Task|QualifiedName])+ 'start'  'at' 'the' 'same' 'time' ';' ;

RestrictionFinishAtTheSameTime:
    tasks+=[Task|QualifiedName] (',' tasks+=[Task|QualifiedName])+ 'finish' 'at' 'the' 'same' 'time' ';' ;

RestrictionStartAfterOtherFinished: 
    ( 
        (tasks+=[Task|QualifiedName]                                    'starts' 'after' otherTask=[Task|QualifiedName] 'has' 'finished') |
        (tasks+=[Task|QualifiedName] (',' tasks+=[Task|QualifiedName])+ 'start'  'after' otherTask=[Task|QualifiedName] 'has' 'finished')
    )
    (    'with' 'delay' 'of' 'at' 'least' delay=INT    )?
    ';'
;

RestrictionStartAfterOtherStarted: 
    ( 
        (tasks+=[Task|QualifiedName]                                    'starts' 'after' otherTask=[Task|QualifiedName] 'has' 'started') |
        (tasks+=[Task|QualifiedName] (',' tasks+=[Task|QualifiedName])+ 'start'  'after' otherTask=[Task|QualifiedName] 'has' 'started')
    )
    (   'with' 'delay' 'of' 'at' 'least' delay=INT   )?
    ';'
;

/* Generic Stuff */

CustomIntProperty:  
    name=STRING '=' value=INT ';'
;

CustomStringProperty:
    name=STRING '=' value=STRING ';'
;

QualifiedName:
    ID ('.' ID)*
;

/* ENUMS */
enum PeriodicityType:
    STRICT         = 'strict'         |
    FLEXIBLE       = 'flexible'
;


enum DesignAssuranceLevelType returns DesignAssuranceLevelType: 
    NONE  = 'None'     |
    QS    = 'QS'       |
    D     = 'D'        |
    C     = 'C'        |
    B     = 'B'        |
    A     = 'A'  
;

