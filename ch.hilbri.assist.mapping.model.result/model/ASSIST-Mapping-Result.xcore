@GenModel(
	generateModelWizard="false", 
	generateExampleClass="false"
)

package ch.hilbri.assist.mapping.model.result

import ch.hilbri.assist.mapping.model.Application
import ch.hilbri.assist.mapping.model.AssistModel
import ch.hilbri.assist.mapping.model.Board
import ch.hilbri.assist.mapping.model.Box
import ch.hilbri.assist.mapping.model.Compartment
import ch.hilbri.assist.mapping.model.Core
import ch.hilbri.assist.mapping.model.Processor
import ch.hilbri.assist.mapping.model.Task
import java.util.List
import java.util.Map
 				

annotation "http://www.eclipse.org/emf/2002/GenModel" as GenModel

type Task2CoreMapType wraps Map<Task, Core>
type StringList wraps List<String>

interface Comparable wraps Comparable<Result>{}

class Result {
	String								name
	refers AssistModel					model	
 	Task2CoreMapType					task2CoreMap
	boolean 							partialSolution = "false"
	double								totalScore = "1.0"

	/* This creates the list of mapping elements; each elements contains all hardware / software elements */
	op SingleMappingElement[]			getMappingElements() {
		task2CoreMap.entrySet.map[ 

			/* Retrieve the entries from the map */
			val application = key.eContainer as Application
			val task		= key
			val core		= value
			val processor 	= value.eContainer as Processor
			val board		= value.eContainer.eContainer as Board
			val box			= value.eContainer.eContainer.eContainer as Box
			val compartment = value.eContainer.eContainer.eContainer.eContainer as Compartment
			
			/* Create the SingleMappingElement based on that data */
			ResultFactory.eINSTANCE.createSingleMappingElement => [
				it.application 	= application
				it.task 		= task 
				it.core 		= core
				it.processor	= processor
				it.board		= board
				it.box			= box
				it.compartment	= compartment	
			]
			
		].toEList
	}
}

class SingleMappingElement {
	refers 	Application		application
	refers 	Task			task
	refers 	Core			core
	refers	Processor		processor
	refers	Board			board
	refers 	Box				box
	refers	Compartment		compartment
}

abstract class AbstractMetric {
	String name
	boolean builtIn
	boolean higherScoreIsBetter
	int		weight
	
	op double computeAbsoluteScore(Result result)
}