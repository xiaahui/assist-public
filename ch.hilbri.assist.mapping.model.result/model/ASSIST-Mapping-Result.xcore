@GenModel(
	generateModelWizard="false", 
	generateExampleClass="false"
)

package ch.hilbri.assist.mapping.model.result

import ch.hilbri.assist.mapping.model.DesignAssuranceLevelType
import ch.hilbri.assist.mapping.model.HardwareArchitectureLevelType
import ch.hilbri.assist.mapping.model.IOAdapterProtectionLevelType
import ch.hilbri.assist.mapping.model.IOAdapterType
import java.util.HashMap
import org.eclipse.emf.common.util.BasicEList

annotation "http://www.eclipse.org/emf/2002/GenModel" as GenModel

interface Comparable wraps Comparable<Result>{}

class Result extends Comparable {
	
	@GenModel(documentation="Name of this result") 
	String							name
	
	@GenModel(documentation="Name of the system")
	String							systemName
	
	@GenModel(documentation="List of all hardware elements in the top hierarchy level")
	contains HardwareElement[0..*]	rootHardwareElements
	
	@GenModel(documentation="Returns the top hardware level for this result")
	derived HardwareArchitectureLevelType topHardwareLevel get {
		if (!rootHardwareElements.empty) {
			switch rootHardwareElements.get(0)  {
				Compartment : 	HardwareArchitectureLevelType.COMPARTMENT
				Box: 			HardwareArchitectureLevelType.BOX
				Board: 			HardwareArchitectureLevelType.BOARD
				Processor: 		HardwareArchitectureLevelType.PROCESSOR
				Core: 			HardwareArchitectureLevelType.CORE
			}
		}
	}
	
	@GenModel(documentation="Returns the bottom hardware level for this result")
	derived HardwareArchitectureLevelType bottomHardwareLevel get {
		HardwareArchitectureLevelType.CORE
	}
	
	@GenModel(documentation="Contains a list of all application groups")
	contains ApplicationGroup[0..*]			applicationGroups
	
	@GenModel(documentation="Contains a list of all applications")
	contains Application[0..*]				applications
	
	@GenModel(documentation="Contains a list of all networks")
	contains Network[0..*] 					networks

	@GenModel(documentation="Contains a list of all communication relations between applications")
	contains CommunicationRelation[0..*]	communications
	
	@GenModel(documentation="Contains the results of the evaluation for this result")
	contains Evaluation[0..1] 				evaluation
	
	op int compareTo(Result o) {
		val double diff = this ?. evaluation.totalScaledScore - o ?. evaluation.totalScaledScore;
		if (diff < 0.0)	return 1;
		if (diff > 0.0)	return -1;
		return 0;
	}
	
	@GenModel(documentation="Create a list of all compartmens in this result")
	op Compartment[] getAllCompartments() {
		if (topHardwareLevel == HardwareArchitectureLevelType.COMPARTMENT) return rootHardwareElements.map(elem | elem as Compartment)
		else return new BasicEList<Compartment>
	}
	
	@GenModel(documentation="Create a list of all boxes in this result")
	op Box[] getAllBoxes() {
		val list = new BasicEList<Box>
		switch topHardwareLevel {
			case COMPARTMENT 	:	for (c : rootHardwareElements)	list.addAll((c as Compartment).boxes)
			case BOX 			: 	list.addAll(rootHardwareElements.map(elem | elem as Box) )
			default			  	: 	{} 		
		}
		return list
	}
	
	@GenModel(documentation="Create a list of all boards in this result")
	op Board[] getAllBoards() {
		val list = new BasicEList<Board>
		switch topHardwareLevel {
			case COMPARTMENT	:	for (c : rootHardwareElements) list.addAll((c as Compartment).allBoards)
			case BOX			:	for (b : rootHardwareElements) list.addAll((b as Box).boards)
			case BOARD			:	list.addAll(rootHardwareElements.map(elem | elem as Board))
			default				: 	{}
		}
		return list
	}
	
	@GenModel(documentation="Create a list of all processors in this result")
	op Processor[] getAllProcessors() {
		val list = new BasicEList<Processor>
		switch topHardwareLevel {
			case COMPARTMENT	: 	for (c : rootHardwareElements) list.addAll((c as Compartment).allProcessors)
			case BOX			:	for (b : rootHardwareElements) list.addAll((b as Box).allProcessors)
			case BOARD			: 	for (b : rootHardwareElements) list.addAll((b as Board).processors)
			default				:	{}
		}
		return list
	}
	
	@GenModel(documentation="Create a list of all cores in this result")
	op Core[] getAllCores() {
		val list = new BasicEList<Core>
		switch topHardwareLevel {
			case COMPARTMENT	: 	for (c : rootHardwareElements) list.addAll((c as Compartment).allCores)
			case BOX			:	for (b : rootHardwareElements) list.addAll((b as Box).allCores)
			case BOARD			: 	for (b : rootHardwareElements) list.addAll((b as Board).allCores)
			default				:	{}
		}
		return list
	}
	
	@GenModel(documentation="Creates a list of all threads in the result")
	op Thread[] getAllThreads() {
		val list = new BasicEList<Thread>
		for (a : applications) list.addAll(a.threads)
		return list
	}
	
	@GenModel(documentation="Finds a hardware element in the result model which represents a given hardware element in the input model")
	op HardwareElement findResultHardwareElement(ch.hilbri.assist.mapping.model.HardwareElement modelHwElement) {
		switch modelHwElement {
			ch.hilbri.assist.mapping.model.Core 		: for (c : allCores) 		if (c.referenceObject == modelHwElement) return c
			ch.hilbri.assist.mapping.model.Processor	: for (p : allProcessors)	if (p.referenceObject == modelHwElement) return p
			ch.hilbri.assist.mapping.model.Board		: for (b : allBoards)		if (b.referenceObject == modelHwElement) return b
		}
		return null
	}
	
	@GenModel(documentation="Finds an application in the result model which represents a given Application in the input model")
	op Application findResultApplication(ch.hilbri.assist.mapping.model.Application modelApp) {
		for (resultApp : applications) 
			if (resultApp.referenceObject == modelApp) return resultApp
		return null	
	}
	
	@GenModel(documentation="Finds a thread in the result model which represents a given thread in the input model")
	op Thread findResultThread(ch.hilbri.assist.mapping.model.Thread modelThread) {
		for (resultThread : allThreads) 
			if (resultThread.referenceObject == modelThread) return resultThread
		return null	
	}
	
	@GenModel(documentation="Finds an applicationgroup in the result model which represents a given ApplicationGroup in the input model")
	op ApplicationGroup findResultApplicationGroup(ch.hilbri.assist.mapping.model.ApplicationGroup modelAppGroup) {
		for (resultAppGroup : applicationGroups) 
			if (resultAppGroup.referenceObject == modelAppGroup) return resultAppGroup
		return null	
	}
}


class HardwareElement {
	String name
	refers ch.hilbri.assist.mapping.model.HardwareElement referenceObject
	
	@GenModel(documentation="Returns the value for the given parameter name - or -1 if this parameter was not found")
	op int getMetricParameterValue(String parameterName) {
		for (parameter : referenceObject.metricParameters) {
			if (parameter.name.equals(parameterName))
				return parameter.value
		}
		return -1;
	}
	
	op HardwareArchitectureLevelType getHardwareLevel()
	
}

class Compartment extends HardwareElement {
	String manufacturer
	String powerSupply
	String side
	String zone
	contains Box[1..*] boxes opposite compartment

	@GenModel(documentation="Create a list of all boxes in this compartment")
	op Board[] getAllBoards() {
		val list = new BasicEList<Board>
		for (b : boxes) list.addAll(b.boards)
		return list
	}
	
	@GenModel(documentation="Create a list of all processors in this compartment")
	op Processor[] getAllProcessors() {
		val list = new BasicEList<Processor>
		for (b : boxes) list.addAll(b.allProcessors)
		return list
	}
	
	@GenModel(documentation="Create a list of all cores in this compartment")
	op Core[] getAllCores() {
		val list = new BasicEList<Core>
		for (b : boxes) list.addAll(b.allCores)
		return list
	}
	
	op HardwareArchitectureLevelType getHardwareLevel() { HardwareArchitectureLevelType.COMPARTMENT }
}

class Box extends HardwareElement {
	String manufacturer
	container Compartment compartment opposite boxes
	contains Board[1..*] boards opposite box

	
	@GenModel(documentation="Create a list of all processors on this box")
	op Processor[] getAllProcessors() {
		val list = new BasicEList<Processor>
		for (b: boards) list.addAll(b.processors)
		return list
	}
		
	@GenModel(documentation="Create a list of all cores on this box")
	op Core[] getAllCores() {
		val list = new BasicEList<Core>
		for (b: boards) list.addAll(b.allCores)
		return list
	}
	
	op HardwareArchitectureLevelType getHardwareLevel() { HardwareArchitectureLevelType.BOX }
}

class Board extends HardwareElement {
	String 						manufacturer
	String 						boardType
	String 						powerSupply
	String						side
	String						ess		    
	DesignAssuranceLevelType 	assuranceLevel = "None"
	int 						ramCapacity
	int							ramUtilization
	int 						romCapacity
	int							romUtilization
	container Box 				box opposite boards
	contains Processor[1..*] 	processors opposite board
	contains IOAdapter[0..*] 	ioAdapters
	refers Network[0..*] 		networks opposite boards
	contains MetricParameter[0..*] metricParameters
	
	@GenModel(documentation="Is this processor used? Does it contain any mapped threads?")
	derived boolean 	notUsed	get { 
		var result = false
		for (p : processors) 
			result = result || p.notUsed
		return result 
	} 
	
	@GenModel(documentation="Creates a list of all applications being mapped to this board")
	op Application[] getAllApplications() {
		val list = new BasicEList<Application> // FIXME: Implement me!
		return list
	}
	
	@GenModel(documentation="Create a list of all cores on this board")
	op Core[] getAllCores() {
		val list = new BasicEList<Core>
		for (p : processors) list.addAll(p.cores)
		return list
	}
	op HardwareArchitectureLevelType getHardwareLevel() { HardwareArchitectureLevelType.BOARD }
}

class Processor extends HardwareElement {
	String manufacturer
	String processorType
	container Board board opposite processors
	contains Core[1..*] cores opposite processor
	contains MetricParameter[0..*] metricParameters
	
	@GenModel(documentation="Is this processor used? Does it contain any mapped threads?")
	derived boolean 	notUsed	get { 
		var result = false
		for (c : cores) 
			result = result || c.notUsed
		return result 
	} 
	
	op HardwareArchitectureLevelType getHardwareLevel() { HardwareArchitectureLevelType.PROCESSOR }
}

class Core extends HardwareElement {
	String 						architecture
	int 						capacity
	int							utilization
	derived double				relativeUtilization get { utilization as double  * 100.0 / capacity as double}
	container Processor 		processor opposite cores
	refers Thread[0..*] 		threads
	
	@GenModel(documentation="Is this core used? Does it contain any mapped threads?")
	derived boolean notUsed		get { threads.empty }
	
	@GenModel(documentation="How much absolute capacity of this core is left unused?")
	derived int remainingAbsoluteCapacity get { capacity - utilization	}
	
	@GenModel(documentation="How much relative capacity of this core is left unused?")
	derived double remainingRelativeCapacity get { remainingAbsoluteCapacity as double / capacity as double	}
	
	op HardwareArchitectureLevelType getHardwareLevel() { HardwareArchitectureLevelType.CORE }
}

class IOAdapter {
	String name
	int totalUnitCount
	IOAdapterType adapterType
	IOAdapterProtectionLevelType protectionLevel = "None"
	refers ch.hilbri.assist.mapping.model.IOAdapter referenceObject
	
	
}

class Network {
	String name
	int bandwidthCapacity
	derived boolean isBoardLocalNetwork get { boards.size <= 1 }
	refers Board[2..*] boards opposite networks
	refers ch.hilbri.assist.mapping.model.Network referenceObject
	
	@GenModel(documentation="Returns the value for the given parameter name - or -1 if this parameter was not found")
	op int getMetricParameterValue(String parameterName) {
		for (parameter : referenceObject.metricParameters) {
			if (parameter.name.equals(parameterName))
				return parameter.value
		}
		return -1;
	}
}

class ApplicationGroup {
	String name
	refers Application[0..*] applications
	refers ApplicationGroup[0..*] applicationGroups
	refers ch.hilbri.assist.mapping.model.ApplicationGroup referenceObject
}

class Application {
	String 									name
	int 									coreUtilization
	int 									ramUtilization
	int 									romUtilization
	DesignAssuranceLevelType 				criticalityLevel 					= "None"
	IOAdapterProtectionLevelType 			ioAdapterProtectionLevel 			= "None"
	int 									parallelThreads 					= "1"
	String 									developedBy
	refers IOAdapterRequirement[0..*] 		ioAdapterRequirements
	refers HardwareElement[0..*] 			restrictMappingToHardwareElements
	contains Thread[0..*] 					threads opposite application
	refers ch.hilbri.assist.mapping.model.Application referenceObject
	
	@GenModel(documentation="Returns the value for the given parameter name - or -1 if this parameter was not found")
	op int getMetricParameterValue(String parameterName) {
		for (parameter : referenceObject.metricParameters) {
			if (parameter.name.equals(parameterName))
				return parameter.value
		}
		return -1;
	}
}

class Thread {
	container Application 	application opposite threads 
	refers Core				core 
	refers ch.hilbri.assist.mapping.model.Thread referenceObject
	derived String			name get { application.name + '_' + application.threads.indexOf(this) }
}

class IOAdapterRequirement {	
	IOAdapterType 	adapterType
	int 			requiredUnits 		= "0"
	boolean 		isSharedAllowed 	= "false"
	boolean 		isExclusiveOnly 	= "false"
	refers ch.hilbri.assist.mapping.model.IOAdapterRequirement referenceObject
}

class CommunicationRelation{
	refers Application[1..*] applicationsOrGroups
	int bandwidthUtilization
	refers ch.hilbri.assist.mapping.model.CommunicationRelation referenceObject
}

abstract class AbstractMetric  {
	String 			name
	int				weight
	boolean 		higherScoreIsBetter
	boolean 		builtIn = "false"
	op double 		computeAbsoluteScore(Result result)
}

type MetricScoreMap wraps HashMap<AbstractMetric, Double>

class Evaluation {

	MetricScoreMap					absoluteScores
	MetricScoreMap					scaledScores
	
	derived double					totalScaledScore get { 
		if ((scaledScores == null) || (scaledScores.keySet.size == 0)) return 0.0
		else scaledScores.values.reduce[i1, i2 | i1 + i2]
	}
	contains AbstractMetric[0..*] 	metricsUsed
}

class MetricParameter {
	String name = ""
	int value = "0"
}
