grammar ch.hilbri.assist.mapping.dsl.MappingDSL with org.eclipse.xtext.common.Terminals

import "ch.hilbri.assist.mapping.model" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AssistModel: 
	'Global' 	'{' 
					'System' '=' systemName=STRING ';' 
	'}'

	'Hardware' 	'{'	
					(compartments+=Compartment)*
	'}'

	'Software' '{'
					(applications+=Application)* 
	'}'

	('Restrictions' '{'
					(dislocalityRelations+=DislocalityRelation)*
					(colocalityRelations+=ColocalityRelation)*
	'}')?
;

Compartment: 
	'Compartment' name=ID '{'
		('Manufacturer' 	'=' manufacturer=STRING 	';')?
		('PowerSupply' 	'=' powerSupply=STRING 	';')?
		(boxes+=Box)+
		('Properties' '{'	(metricParameters+=MetricParameter)* '}')?
	'}'
;

Box:
	'Box' name=ID '{'
		('Manufacturer' 			'=' manufacturer=STRING ';')?
		(boards+=Board)*
		('Properties' '{'	(metricParameters+=MetricParameter)* '}')?
	'}'
;
	
Board:
	'Board' name=ID '{'
		('Manufacturer' 			'=' manufacturer=STRING ';')?
		('Type' 					'=' boardType=STRING ';')?
		('PowerSupply' 			'=' powerSupply=STRING ';')?
	    ('DesignAssuranceLevel' 	'=' assuranceLevel=DesignAssuranceLevelType';')?
		('RAM'  					'=' ramCapacity=INT ';')?
		('ROM'  					'=' romCapacity=INT ';')?
		(processors+=Processor)+
		(ioAdapters+=IOAdapter)*
		('Properties' '{'	(metricParameters+=MetricParameter)* '}')?
	'}'
;

Processor:
	'Processor' name=ID '{'
	    ('Manufacturer' 			'=' manufacturer=STRING ';')?
	    ('Type'         			'=' processorType=STRING ';')?
		(cores+=Core)+
		('Properties' '{'		(metricParameters+=MetricParameter)* '}')?
	'}';

Core:
	'Core' name=ID '{' 
		('Capacity' 					'=' capacity=INT ';')?
		('Architecture' 				'=' architecture=STRING ';')?
		('Properties' '{'	(metricParameters+=MetricParameter)* '}')?
	'}';

IOAdapter:
	'Adapter' name=ID '{' 	
	 	'Type' '=' adapterType=IOAdapterType ';'
	 	'Count' '=' totalCount=INT ';'
	'}' 
;

/* SOFTWARE */

//ApplicationGroup: 
//	'Group' name=ID '{' applicationsOrGroups+=[ApplicationOrApplicationGroup] (',' applicationsOrGroups+=[ApplicationOrApplicationGroup])+ '}'
//;

Application:
	'Application' name=ID '{'
	    ('CriticalityLevel' 		'=' criticalityLevel=DesignAssuranceLevelType ';')?
		('Developer'		 		'=' developedBy=STRING ';')?
		('RestrictDeploymentTo' '{' restrictMappingToHardwareElements+=[HardwareElement|QualifiedName] (',' restrictMappingToHardwareElements+=[HardwareElement|QualifiedName])* '}' ';')?
		(tasks+=Task)+
		('Properties' 			'{'	(metricParameters+=MetricParameter)* '}')?
	'}';

Task:
	'Task' name=ID '{'
		('CoreUtilization' 			'=' coreUtilization=INT ';')? 
 		('RequiredRAM' 				'=' ramUtilization=INT ';')? 
		('RequiredROM'				'=' romUtilization=INT ';')? 
		(ioAdapterRequirements+=IOAdapterRequirement)*
		('RestrictDeploymentTo'	'{' restrictMappingToHardwareElements+=[HardwareElement|QualifiedName] (',' restrictMappingToHardwareElements+=[HardwareElement|QualifiedName])* '}' ';')? 
		('Properties' 			'{'	(metricParameters+=MetricParameter)* '}')?
	'}';

IOAdapterRequirement: 
	'Requires' 	requiredAdapterCount=INT 
				adapterType=IOAdapterType 'adapter' 
  			 	(isExclusiveOnly?='exclusive' | isSharedAllowed?='shared') 
	';' 
;

/* RELATIONEN */

DislocalityRelation:
	applications+=[Application] (',' applications+=[Application])* 'dislocal' 'up' 'to' hardwareLevel=HardwareArchitectureLevelType ';';
	
ColocalityRelation:
	applications+=[Application|QualifiedName] (',' (applications+=[Application]))* 'on' 'same' 	hardwareLevel=HardwareArchitectureLevelType ';'; 

//DissimilarityRelation: 
//	applicationsOrGroups+=[ApplicationOrApplicationGroup] (',' applicationsOrGroups+=[ApplicationOrApplicationGroup])+
//	'dissimilar' 'based' 'on'
//	dissimilarityClause=DissimilarityClause ';'
//;
//
//DissimilarityClause:  
//	DissimilarityEntry | ( '(' (=>DissimilarityDisjunction | DissimilarityConjunction) ')' ) // Der Pfeil ist wichtig!
//;
//
//DissimilarityDisjunction: 
//	dissimilarityClauses+=DissimilarityClause ( 'OR' dissimilarityClauses+=DissimilarityClause)+ ;
//
//DissimilarityConjunction: 
//	dissimilarityClauses+=DissimilarityClause ( 'AND' dissimilarityClauses+=DissimilarityClause)+ ;
//
//DissimilarityEntry: 
//	( 'Compartment.' compartmentAttribute= CompartmentAttributes ) 	|
//	( 'Box.' boxAttribute = BoxAttributes) 							|
//	( 'Board.' boardAttribute = BoardAttributes)					|
//	( 'Processor.' processorAttribute = ProcessorAttributes)
//;
//
//enum CompartmentAttributes :
//	MANUFACTURER 	= 'Manufacturer' 	| 
//	POWERSUPPLY	 	= 'PowerSupply';
//	
//enum BoxAttributes :
//	MANUFACTURER 	= 'Manufacturer';
//	
//enum BoardAttributes:
//	MANUFACTURER 	= 'Manufacturer' 			|
//	POWERSUPPLY 	= 'PowerSupply'				|
//	ASSURANCELEVEL 	= 'DesignAssuranceLevel' 	|
//	BOARDTYPE 		= 'Type';
//
//
//enum ProcessorAttributes:
//	MANUFACTURER 	= 'Manufacturer' 	| 
//	PROCESSORTYPE	= 'ProcessorType' 
//;

MetricParameter:  
	name=STRING '=' value=INT ';'
;

QualifiedName:
	ID ('.' ID)*
;

/* ENUMS */
enum HardwareArchitectureLevelType:
	CORE 		= 'Core'		|
	PROCESSOR 	= 'Processor'	|
	BOARD		= 'Board'		|
	BOX			= 'Box'			|
	COMPARTMENT	= 'Compartment'
;

enum DesignAssuranceLevelType: 
	NONE= 'None' 	|
	QS	= 'QS'	 	|
	D	= 'D'		|
	C	= 'C'		|
	B	= 'B'		|
	A 	= 'A'  
;

enum IOAdapterType:
	CAN 		= 'Can'					|
	ELB			= 'Enhanced Local Bus'	|
	ETH			= 'Ethernet'			|
	ANALOG 		= 'Analog'				|
	DIGITAL		= 'Digital'				|
	SERIAL		= 'Serial'				;
