grammar ch.hilbri.assist.mapping.dsl.MappingDSL with org.eclipse.xtext.common.Terminals

import "ch.hilbri.assist.model" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AssistModel: 
    'Global' '{' 
                    'System' '=' systemName=STRING ';' 
    '}'

    'Hardware' '{'    
                    (compartments+=Compartment)*
    '}'

    'Software' '{'
                    (applications+=Application)* 
    '}'

    ('Restrictions' '{'
                    (dislocalityRelations+=DislocalityRelation)*
                    (colocalityRelations+=ColocalityRelation)*
                    (dissimilarityRelations+=DissimilarityRelation)*
    '}')?
;

Compartment: 
    'Compartment' name=ID '{'
        ('Manufacturer' '=' manufacturer=STRING     ';')?
        ('PowerSupply'  '=' powerSupply=STRING      ';')?      
        (features+=Feature                             )*
        (boxes+=Box                                    )+
        ('Properties' '{' (customProperties+=CustomStringProperty | customProperties+=CustomIntProperty)* '}' )?
    '}'
;

Box:
    'Box' name=ID '{'
        ('Manufacturer'             '=' manufacturer=STRING ';')?
        (features+=Feature                                     )*
        (boards+=Board                                         )*
        ('Properties' '{' (customProperties+=CustomStringProperty | customProperties+=CustomIntProperty)* '}' )?
    '}'
;
    
Board:
    'Board' name=ID '{'
        ('Manufacturer'             '=' manufacturer=STRING ';'                   )?
        ('Type'                     '=' boardType=STRING ';'                      )?
        ('PowerSupply'              '=' powerSupply=STRING ';'                    )?
        ('DesignAssuranceLevel'     '=' assuranceLevel=DesignAssuranceLevelType';')?
        ('RAM'                      '=' ramCapacity=INT ';'                       )?
        ('ROM'                      '=' romCapacity=INT ';'                       )?
        (features+=Feature                                                        )*
        (processors+=Processor                                                    )+
        ('Properties' '{' (customProperties+=CustomStringProperty | customProperties+=CustomIntProperty)* '}' )?
    '}'
;

Processor:
    'Processor' name=ID '{'
        ('Manufacturer'             '=' manufacturer=STRING ';' )?
        ('Type'                     '=' processorType=STRING ';')?
        (features+=Feature                                      )*
        (cores+=Core)+
        ('Properties' '{' (customProperties+=CustomStringProperty | customProperties+=CustomIntProperty)* '}' )?
    '}';

Core:
    'Core' name=ID '{' 
        ('Capacity'                  '=' capacity=INT ';'       )?
        ('Architecture'              '=' architecture=STRING ';')?
        (features+=Feature                                      )*
        ('Properties' '{' (customProperties+=CustomStringProperty | customProperties+=CustomIntProperty)* '}' )?
    '}';

/* Features provide by the hardware */
Feature:
    FeatureSimple | FeatureSyncAccess | FeatureExclAccess;

FeatureSimple returns Feature:
    'Provides' shared?='shared' 'feature' name=STRING ';';

FeatureSyncAccess returns Feature:
    'Provides' shared?='shared' 'feature' name=STRING synchronizedAccess?='with' 'synchronized' 'access' ';';
    
FeatureExclAccess returns Feature:
    'Provides' units=INT 'of' 'exclusive' 'feature' name=STRING ';';


/* SOFTWARE */
Application:
    'Application' name=ID '{'
        ('CriticalityLevel'          '=' criticalityLevel=DesignAssuranceLevelType ';')?
        ('Developer'                 '=' developedBy=STRING ';')?
        ('RestrictDeploymentTo' '{' 
                restrictMappingToHardwareElements+=[HardwareElement|QualifiedName] (',' restrictMappingToHardwareElements+=[HardwareElement|QualifiedName])* 
          '}' ';' )?
        (tasks+=Task)+
        ('Properties' '{' (customProperties+=CustomStringProperty | customProperties+=CustomIntProperty)* '}' )?
    '}';

Task:
    'Task' name=ID '{'
        ('CoreUtilization'             '=' coreUtilization=INT ';')? 
        ('RequiredRAM'                 '=' ramUtilization=INT  ';')? 
        ('RequiredROM'                 '=' romUtilization=INT  ';')? 
        ('RestrictDeploymentTo' '{' 
                  restrictMappingToHardwareElements+=[HardwareElement|QualifiedName] (',' restrictMappingToHardwareElements+=[HardwareElement|QualifiedName])* 
            '}' ';'
        )? 
        (featureRequirements+=FeatureRequirement)*
        ('Properties' '{' (customProperties+=CustomStringProperty | customProperties+=CustomIntProperty)* '}' )?
    '}';

/* General Feature Requirements - see #38 */
FeatureRequirement: 
    SharedFeatureRequirement      |
    ExclusiveFeatureRequirement;

SharedFeatureRequirement returns FeatureRequirement:
    'Requires' shared?='shared' hardwareLevel=HardwareArchitectureLevelType 'feature' name=STRING ';';

ExclusiveFeatureRequirement returns FeatureRequirement:
    'Requires' units=INT 'of' 'exclusive' hardwareLevel=HardwareArchitectureLevelType 'feature' name=STRING ';';


/* Safety Restrictions / Relations */
DislocalityRelation:
    applications+=[Application] (',' applications+=[Application])* 'dislocal' 'up' 'to' hardwareLevel=HardwareArchitectureLevelType ';';
    
ColocalityRelation:
    applications+=[Application|QualifiedName] (',' (applications+=[Application]))* 'on' 'same' hardwareLevel=HardwareArchitectureLevelType ';'; 

DissimilarityRelation: 
    applications+=[Application|QualifiedName] (',' (applications+=[Application]))*
    'dissimilar' 'based' 'on'
    dissimilarityClause=DissimilarityClause ';';

DissimilarityClause:  
    DissimilarityEntry | 
    (=>DissimilarityDisjunction | DissimilarityConjunction);  

DissimilarityEntry: 
    dissimilarityAttribute=DissimilarityAttributes;

DissimilarityDisjunction: 
    '(' dissimilarityClauses+=DissimilarityClause ( 'OR' dissimilarityClauses+=DissimilarityClause)+     ')' ;

DissimilarityConjunction: 
    '(' dissimilarityClauses+=DissimilarityClause ( 'AND' dissimilarityClauses+=DissimilarityClause)+    ')';


enum DissimilarityAttributes:
    COMPARTMENT_MANUFACTURER    = 'Compartment.Manufacturer'          |
    COMPARTMENT_POWERSUPPLY     = 'Compartment.PowerSupply'           |
    BOX_MANUFACTURER            = 'Box.Manufacturer'                  |
    BOARD_MANUFACTURER          = 'Board.Manufacturer'                |
    BOARD_BOARDTYPE             = 'Board.Type'                        |
    BOARD_POWERSUPPLY           = 'Board.PowerSupply'                 |
    BOARD_ASSURANCELEVEL        = 'Board.DesignAssuranceLevel'        |
    PROCESSOR_MANUFACTURER      = 'Processor.Manufacturer'            |
    PROCESSOR_PROCESSORTYPE     = 'Processor.Type'                    |
    CORE_ARCHITECTURE           = 'Core.Architecture'
;


/* CUSTOM PROPERTIES  */
CustomIntProperty:  
    name=STRING '=' value=INT ';'
;

CustomStringProperty:
    name=STRING '=' value=STRING ';'
;

QualifiedName:
    ID ('.' ID)*
;

/* ENUMS */
enum HardwareArchitectureLevelType:
    CORE         = 'Core'           |
    PROCESSOR    = 'Processor'      |
    BOARD        = 'Board'          |
    BOX          = 'Box'            |
    COMPARTMENT  = 'Compartment'
;

enum DesignAssuranceLevelType: 
    NONE = 'None'     |
    QS   = 'QS'       |
    D    = 'D'        |
    C    = 'C'        |
    B    = 'B'        |
    A    = 'A'  
;
