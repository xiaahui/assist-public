@GenModel(
	modelPluginID="ch.hilbri.assist.mapping.model",
	editDirectory="/ch.hilbri.assist.mapping.model.edit/src", 
	editPluginID="ch.hilbri.assist.mapping.model.edit",
	editorDirectory="/ch.hilbri.assist.mapping.model.editor/src", 
	editorPluginID="ch.hilbri.assist.mapping.model.editor",
	generateModelWizard="false", 
	generateExampleClass="false" 
 )

package ch.hilbri.assist.mapping.model

annotation "http://www.eclipse.org/emf/2002/GenModel" as GenModel

class AssistModel {
	String 			systemName 				= ""
	contains 		Compartment[1..*] 			compartments
	contains 		Application[1..*] 			applications
	contains 		ApplicationGroup[0..*] 		applicationGroups
	contains 		DissimilarityRelation[0..*] dissimilarityRelations
	contains 		DislocalityRelation[0..*] 	dislocalityRelations
	contains 		ColocalityRelation[0..*] 	proximityRelations
	op Compartment[] 	getAllCompartments()  	{ compartments }
	op Box[] 			getAllBoxes() 			{ compartments.map[allBoxes].flatten.toEList		}
	op Board[] 			getAllBoards() 			{ compartments.map[allBoards].flatten.toEList 		}
	op Processor[] 		getAllProcessors() 		{ compartments.map[allProcessors].flatten.toEList	}
	op Core[] 			getAllCores() 			{ compartments.map[allCores].flatten.toEList		}
	op Task[]			getAllTasks()			{ applications.map[allTasks].flatten.toEList		}
	
	op HardwareElement[] getAllHardwareElements(int level) {
		if (level == 0) 		allCores.map[it as HardwareElement]
		else if (level == 1)	allProcessors.map[it as HardwareElement]
		else if (level == 2)	allBoards.map[it as HardwareElement]
		else if (level == 3)	allBoxes.map[it as HardwareElement]
		else if (level == 4)	allCompartments.map[it as HardwareElement]
		else					null
	}
}

class HardwareElement {
	 String name = ""
	 String manufacturer  = ""
	 contains MetricParameter[0..*] metricParameters
}

class Compartment extends HardwareElement {
	String powerSupply	= ""
	contains Box[1..*] boxes opposite compartment
	op Box[] 			getAllBoxes() 			{ boxes }
	op Board[] 			getAllBoards() 			{ boxes.map[allBoards].flatten.toEList		}
	op Processor[] 		getAllProcessors() 		{ boxes.map[allProcessors].flatten.toEList	}
	op Core[] 			getAllCores() 			{ boxes.map[allCores].flatten.toEList		}
}

class Box extends HardwareElement {
	container Compartment compartment opposite boxes
	contains Board[1..*] boards opposite box
		
	op Board[] 			getAllBoards() 			{ boards }
	op Processor[] 		getAllProcessors() 		{ boards.map[allProcessors].flatten.toEList	}
	op Core[] 			getAllCores() 			{ boards.map[allCores].flatten.toEList		}
}

class Board extends HardwareElement {
	String 							boardType		= ""
	String 							powerSupply		= ""
	DesignAssuranceLevelType 		assuranceLevel 	= "None"
	int 							ramCapacity 	= "0"
	int 							romCapacity 	= "0"
	container 	Box 				box opposite boards
	contains 	Processor[1..*] 	processors opposite board
	contains 	IOAdapter[0..*] 	ioAdapters
	op String			toString() 				{ name 										}
	op Processor[] 		getAllProcessors() 		{ processors 								}
	op Core[] 			getAllCores() 			{ processors.map[allCores].flatten.toEList	}
}

class Processor extends HardwareElement {
	String processorType = ""
	container Board board opposite processors
	contains Core[1..*] cores opposite processor 
	op Core[] getAllCores()	{ cores	}
}

class Core extends HardwareElement {
	String architecture = ""
	int capacity = "0"
	container Processor processor opposite cores
}

class IOAdapter {
	String name = ""
	int totalCount = "0"
	IOAdapterType adapterType = "None"
}

class ApplicationOrApplicationGroup {
	String name = ""
	op String 			toString() 				{ name }
}

class ApplicationGroup extends ApplicationOrApplicationGroup {
	refers ApplicationOrApplicationGroup[1..*] applicationsOrGroups
	op String toString() { name }
}

class Application extends ApplicationOrApplicationGroup {
	DesignAssuranceLevelType criticalityLevel 				= "None"
	String developedBy										= ""
	refers HardwareElement[0..*] restrictMappingToHardwareElements
	contains Task[1..*] 			tasks
	contains MetricParameter[0..*] 	metricParameters
	op String 			toString() 				{ name 	}
	op Task[]			getAllTasks()			{ tasks }
}

class Task {
	String name = ""
	int coreUtilization 									= "0"
	int ramUtilization 										= "0"
	int romUtilization										= "0"
	contains IOAdapterRequirement[0..*] ioAdapterRequirements
	refers HardwareElement[0..*] restrictMappingToHardwareElements
	contains MetricParameter[0..*] metricParameters
	op String 			toString() 				{ name }
}


/* *********************************************** */
/*   REQUIREMENTS / RELATIONS                      */
/* *********************************************** */
class IOAdapterRequirement {	
	IOAdapterType 					adapterType				= "None"
	int 							requiredAdapterCount 	= "0"
	boolean 						isSharedAllowed 		= "false"
	boolean 						isExclusiveOnly 		= "false"
}


class DissimilarityRelation {
	refers ApplicationOrApplicationGroup[1..*] applicationsOrGroups
	contains DissimilarityClause[1] dissimilarityClause
}

class DissimilarityClause {}

// OR
class DissimilarityDisjunction extends DissimilarityClause {
	contains DissimilarityClause[2..*] dissimilarityClauses
}

// AND
class DissimilarityConjunction extends DissimilarityClause  {
	contains DissimilarityClause[2..*] dissimilarityClauses
}

class DissimilarityEntry extends DissimilarityClause {
	
	derived HardwareArchitectureLevelType level get {
		if (compartmentAttribute != CompartmentAttributes.NONE)  HardwareArchitectureLevelType.COMPARTMENT
		else if (boxAttribute != BoxAttributes.NONE) 			 HardwareArchitectureLevelType.BOX
		else if (boardAttribute != BoardAttributes.NONE)		 HardwareArchitectureLevelType.BOARD
		else if (processorAttribute != ProcessorAttributes.NONE) HardwareArchitectureLevelType.PROCESSOR
		else null
	}
	
	CompartmentAttributes 	compartmentAttribute 	= "None"
	BoxAttributes 			boxAttribute			= "None"
	BoardAttributes 		boardAttribute			= "None"
	ProcessorAttributes 	processorAttribute		= "None"
}

enum CompartmentAttributes{
	NONE 			as "None"
	MANUFACTURER	as "Manufacturer"
	POWERSUPPLY		as "PowerSupply"
}

enum BoxAttributes{
	NONE			as "None"
	MANUFACTURER	as "Manufacturer"	
}

enum BoardAttributes{
	NONE			as "None"
	MANUFACTURER	as "Manufacturer"
	POWERSUPPLY		as "PowerSupply"
	ASSURANCELEVEL	as "AssuranceLevel"
	BOARDTYPE		as "BoardType"
}

enum ProcessorAttributes{
	NONE			as "None"
	MANUFACTURER	as "Manufacturer"
	PROCESSORTYPE	as "ProcessorType"
}


class DislocalityRelation{
	refers ApplicationOrApplicationGroup[1..*] applicationsOrGroups
	HardwareArchitectureLevelType hardwareLevel
}

class ColocalityRelation {
	refers ApplicationOrApplicationGroup[0..*] applicationsOrGroups
	HardwareArchitectureLevelType hardwareLevel
}

class MetricParameter {
	String name = ""
	int value = "0"
}

enum HardwareArchitectureLevelType {
	CORE 		as "Core" 			= 1 
	PROCESSOR 	as "Processor"		= 2
	BOARD		as "Board"			= 3
	BOX			as "Box"			= 4
	COMPARTMENT	as "Compartment"	= 5
}

enum DesignAssuranceLevelType {
	NONE 		as "None"
	QS 			as "QS"
	D 			as "D"
	C 			as "C"
	B 			as "B"
	A 			as "A"
}

enum IOAdapterType {
	NONE		as "None"
	CAN 		as "Can"
	ELB			as "Enhanced Local Bus"
	ETH			as "Ethernet"
	ANALOG 		as "Analog"
	DIGITAL		as "Digital"
	SERIAL		as "Serial"
}

