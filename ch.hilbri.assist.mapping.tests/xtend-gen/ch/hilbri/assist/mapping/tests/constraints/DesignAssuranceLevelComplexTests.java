package ch.hilbri.assist.mapping.tests.constraints;

import ch.hilbri.assist.mapping.tests.AbstractMappingTest;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class DesignAssuranceLevelComplexTests extends AbstractMappingTest {
  public DesignAssuranceLevelComplexTests() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("Global { ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System name = \"SystemA\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("Hardware {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Board B1 {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DesignAssuranceLevel = A;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Processor P_A {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Core C_A { Capacity = 80; }");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("Board B2 {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DesignAssuranceLevel = B;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Processor P_B {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Core C_B { Capacity = 80; }");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("Board B3 {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DesignAssuranceLevel = C;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Processor P_C {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Core C_C { Capacity = 80; }");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("Board B4 {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DesignAssuranceLevel = D;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Processor P_D {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Core C_D { Capacity = 80; }");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append(" \t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("Software {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Application A1 {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Core-utilization = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Criticality level = B;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Application A2 {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Core-utilization = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Criticality level = C;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    this.input = _builder.toString();
  }
}
