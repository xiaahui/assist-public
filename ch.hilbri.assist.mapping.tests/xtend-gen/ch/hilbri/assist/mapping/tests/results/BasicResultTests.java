package ch.hilbri.assist.mapping.tests.results;

import ch.hilbri.assist.mapping.tests.AbstractMappingTest;
import org.eclipse.xtend2.lib.StringConcatenation;

@SuppressWarnings("all")
public class BasicResultTests extends AbstractMappingTest {
  public BasicResultTests() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("Global {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("System name = \"Simple System\";");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("Hardware {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Compartment C1 {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Manufacturer = \"CompartmentManufacturer\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PowerSupply = \"CompartmentPowerSupply\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Side\t\t = \"CompartmentSide\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Zone\t\t = \"CompartmentZone\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Box Box1 {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Manufacturer = \"BoxManufacturer\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("Board Board1 {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Manufacturer = \"Board Vendor 1\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Type\t\t = \"BoardType\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("PowerSupply = \"BoardPowerSupply\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("DesignAssuranceLevel = C;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("RAM capacity = 98765;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("ROM capacity = 67890;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Processor Processor1 {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Manufacturer = \"Freescale\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Type = \"MPC5554\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Core Core1 {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Capacity = 100;   ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Architecture = \"e200z6\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("Software {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Application A1   {\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Core-utilization \t\t\t= 10;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Required RAM capacity \t\t= 123; ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Required ROM capacity \t\t= 456; ");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("Criticality level \t\t\t= D;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("Required IO protection \t\t= L2;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Identical parallel threads \t= 3;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Developed by \t\t\t\t= \"Company A\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.input = _builder.toString();
  }
}
