/*
 * generated by Xtext 2.12.0
 */
package ch.hilbri.assist.scheduling.dsl.ui.outline

import ch.hilbri.assist.model.Application
import ch.hilbri.assist.model.AssistModel
import ch.hilbri.assist.model.Board
import ch.hilbri.assist.model.Box
import ch.hilbri.assist.model.Compartment
import ch.hilbri.assist.model.Core
import ch.hilbri.assist.model.Processor
import ch.hilbri.assist.model.Task
import org.eclipse.core.runtime.FileLocator
import org.eclipse.core.runtime.Path
import org.eclipse.jface.resource.ImageDescriptor
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.osgi.framework.FrameworkUtil

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
class SchedulingDslOutlineTreeProvider extends DefaultOutlineTreeProvider {

	def _createChildren(IOutlineNode parentNode, AssistModel model) {
		val bundle = FrameworkUtil.getBundle(class)
		val imgfolderDesc = ImageDescriptor.createFromURL(FileLocator.find(bundle, new Path("icons/outlineview_folder.png"), null));
		
		/* ---------- HARDWARE ------------- */
		val hardwareNode = new VirtualOutlineNode(parentNode, imgfolderDesc , "Hardware", false)
		for (hw : model.compartments)
			createNode(hardwareNode, hw)
		
		/* ---------- APPLICATIONS AND GROUPS --------- */
		val applicationsNode = new VirtualOutlineNode(parentNode, imgfolderDesc, "Applications", false)
		for (sw : model.applications) 
		    createNode(applicationsNode, sw)
		
		/* --------- RESTRICTIONS -------------- */
        if (!model.schedulingRestrictions.empty) {
            val contraintsNode = new VirtualOutlineNode(parentNode, imgfolderDesc, "Restrictions", false)
            for (r : model.schedulingRestrictions) 
                createNode(contraintsNode, r)
        }
	}
	
    /* Hardware */ 
    def _createChildren(IOutlineNode parentNode, Compartment compartment) {
        for (box : compartment.allBoxes) createNode(parentNode, box)
    }
    
    def _createChildren(IOutlineNode parentNode, Box box) {
        for (board : box.allBoards) createNode(parentNode, board)
    }

    def _createChildren(IOutlineNode parentNode, Board board) {
        for (processor : board.allProcessors) createNode(parentNode, processor)
    }   
    
    def _createChildren(IOutlineNode parentNode, Processor processor) {
        for (core : processor.allCores) createNode(parentNode, core)
    }
    
    def _isLeaf(Core core) { true }

    /* Software */
    def _createChildren(IOutlineNode parentNode, Application application) {
        for (task : application.tasks) createNode(parentNode, task)
    }
    
    def _isLeaf(Task task) { true }
}
