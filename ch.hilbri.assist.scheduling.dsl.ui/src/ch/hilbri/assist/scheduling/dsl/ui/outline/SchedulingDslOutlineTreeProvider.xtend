/*
 * generated by Xtext 2.12.0
 */
package ch.hilbri.assist.scheduling.dsl.ui.outline

import ch.hilbri.assist.model.AssistModel
import org.eclipse.core.runtime.FileLocator
import org.eclipse.core.runtime.Path
import org.eclipse.jface.resource.ImageDescriptor
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.osgi.framework.FrameworkUtil

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#outline
 */
class SchedulingDslOutlineTreeProvider extends DefaultOutlineTreeProvider {

	def _createChildren(IOutlineNode parentNode, AssistModel model) {
		val bundle = FrameworkUtil.getBundle(class)
		val imgfolderDesc = ImageDescriptor.createFromURL(FileLocator.find(bundle, new Path("icons/outlineview_folder.png"), null));
		
		/* ---------- HARDWARE ------------- */
		val hardwareNode = new VirtualOutlineNode(parentNode, imgfolderDesc , "Hardware", false)
		for (hw : model.compartments)
			createNode(hardwareNode, hw)
		
		/* ---------- APPLICATIONS AND GROUPS --------- */
		val applicationsNode = new VirtualOutlineNode(parentNode, imgfolderDesc, "Applications", false)
		for (sw : model.applications) 
		    createNode(applicationsNode, sw)
		
		/* --------- RESTRICTIONS -------------- */
        if (!model.schedulingRestrictions.empty) {
            val contraintsNode = new VirtualOutlineNode(parentNode, imgfolderDesc, "Restrictions", false)
            for (r : model.schedulingRestrictions) 
                createNode(contraintsNode, r)
        }
	}
}
