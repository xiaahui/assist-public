grammar ch.hilbri.assist.dse.dsl.DSEDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "ch.hilbri.assist.model" 

AssistModelDSE: 
	'Global' 	'{' 
					'System' '=' systemName=STRING ';' 
	'}'

	'Hardware' 	'{'	
					(compartments+=Compartment)*
	'}'

	'Software' '{'
					(applications+=Application)* 
					(applicationAlternatives+=ApplicationAlternatives)*
	'}'

	('Restrictions' '{'
					(dislocalityRelations+=DislocalityRelation)*
					(colocalityRelations+=ColocalityRelation)*
					(dissimilarityRelations+=DissimilarityRelation)*
					(restrictionAlternatives+=RestrictionAlternatives)*
	'}')?
	
	('Candidates' '{'
					(explorationCandidates+=ExplorationCandidate)*
	'}')?
;

/* HARDWARE */

Compartment returns Compartment: 
	'Compartment' name=ID '{'
		('Manufacturer' 	'=' manufacturer=STRING 	';')?
		('PowerSupply' 	'=' powerSupply=STRING 	';')?
		(boxes+=BoxDSE)+
		('Properties' '{'	(metricParameters+=MetricParameter)* '}')?
	'}'
;

BoxDSE:
	'Box' name=ID '{'
		('Manufacturer' 			'=' manufacturer=STRING ';')?
		(boards+=Board)*
		(boardAlternatives+=BoardAlternatives)*
		('Properties' '{'	(metricParameters+=MetricParameter)* '}')?
	'}'
;
	
Board returns Board:
	'Board' name=ID '{'
		('Manufacturer' 			'=' manufacturer=STRING ';')?
		('Type' 					'=' boardType=STRING ';')?
		('PowerSupply' 			'=' powerSupply=STRING ';')?
	    ('DesignAssuranceLevel' 	'=' assuranceLevel=DesignAssuranceLevelType';')?
		('RAM'  					'=' ramCapacity=INT ';')?
		('ROM'  					'=' romCapacity=INT ';')?
		(processors+=Processor)+
		(ioAdapters+=IOAdapter)*
		('Properties' '{'	(metricParameters+=MetricParameter)* '}')?
	'}'
;

Processor returns Processor:
	'Processor' name=ID '{'
	    ('Manufacturer' 			'=' manufacturer=STRING ';')?
	    ('Type'         			'=' processorType=STRING ';')?
		(cores+=Core)+
		('Properties' '{'		(metricParameters+=MetricParameter)* '}')?
	'}';

Core returns Core:
	'Core' name=ID '{' 
		('Capacity' 					'=' capacity=INT ';')?
		('Architecture' 				'=' architecture=STRING ';')?
		('Properties' '{'	(metricParameters+=MetricParameter)* '}')?
	'}';

IOAdapter returns IOAdapter:
	'Adapter' name=ID '{' 	
	 	'Type' '=' adapterType=IOAdapterType ';'
	 	'Count' '=' totalCount=INT ';'
	'}' 
;

BoardAlternatives: 
	'Alternatives' '{' 
		(alternatives+=BoardAlternative)+
	'}'
;

BoardAlternative: 
	'Alternative' name=ID '{'
		(boards+=Board)*
	'}'
;

/* SOFTWARE */
/* ******** */

Application returns Application:
	'Application' name=ID '{'
	    ('CriticalityLevel' 		'=' criticalityLevel=DesignAssuranceLevelType ';')?
		('Developer'		 		'=' developedBy=STRING ';')?
		('RestrictDeploymentTo' '{' restrictMappingToHardwareElements+=[HardwareElement|QualifiedName] (',' restrictMappingToHardwareElements+=[HardwareElement|QualifiedName])* '}' ';')?
		(tasks+=Task)+
		('Properties' 			'{'	(metricParameters+=MetricParameter)* '}')?
	'}';

Task returns Task:
	'Task' name=ID '{'
		('CoreUtilization' 			'=' coreUtilization=INT ';')? 
 		('RequiredRAM' 				'=' ramUtilization=INT ';')? 
		('RequiredROM'				'=' romUtilization=INT ';')? 
		(ioAdapterRequirements+=IOAdapterRequirement)*
		('RestrictDeploymentTo'	'{' restrictMappingToHardwareElements+=[HardwareElement|QualifiedName] (',' restrictMappingToHardwareElements+=[HardwareElement|QualifiedName])* '}' ';')? 
		('Properties' 			'{'	(metricParameters+=MetricParameter)* '}')?
	'}';

IOAdapterRequirement returns IOAdapterRequirement:
	'Requires' 	requiredAdapterCount=INT 
				adapterType=IOAdapterType 'adapter' 
  			 	(isExclusiveOnly?='exclusive' | isSharedAllowed?='shared') 
	';' 
;

ApplicationAlternatives: 
	'Alternatives' '{'
		(alternatives+=ApplicationAlternative)+
	'}'
;


ApplicationAlternative: 
	'Alternative' name=ID  '{'
		(applications+=Application)*
	'}'
;

/* RELATIONEN */
/* ********** */

RestrictionAlternatives: 
	'Alternatives' '{'
		(alternatives+=RestrictionAlternative)+
	'}'
	;

RestrictionAlternative: 
	'Alternative' name=ID '{'
		(dislocalityRelations+=DislocalityRelation)*
		(colocalityRelations+=ColocalityRelation)*	
		(dissimilarityRelations+=DissimilarityRelation)*
	'}'
;

DislocalityRelation returns DislocalityRelation:
	applications+=[Application] (',' applications+=[Application])* 'dislocal' 'up' 'to' hardwareLevel=HardwareArchitectureLevelType ';';
	
ColocalityRelation returns ColocalityRelation:
	applications+=[Application|QualifiedName] (',' (applications+=[Application]))* 'on' 'same' 	hardwareLevel=HardwareArchitectureLevelType ';'; 

DissimilarityRelation: 
	applications+=[Application|QualifiedName] (',' (applications+=[Application]))*
	'dissimilar' 'based' 'on'
	dissimilarityClause=DissimilarityClause ';';

DissimilarityClause:  
	DissimilarityEntry | 
	(=>DissimilarityDisjunction | DissimilarityConjunction);  

DissimilarityEntry: 
	dissimilarityAttribute=DissimilarityAttributes;

DissimilarityDisjunction: 
	'(' dissimilarityClauses+=DissimilarityClause ( 'OR' dissimilarityClauses+=DissimilarityClause)+ 	')' ;

DissimilarityConjunction: 
	'(' dissimilarityClauses+=DissimilarityClause ( 'AND' dissimilarityClauses+=DissimilarityClause)+ 	')';


enum DissimilarityAttributes:
	COMPARTMENT_MANUFACTURER		= 'Compartment.Manufacturer'			|
	COMPARTMENT_POWERSUPPLY		= 'Compartment.PowerSupply'			|
	BOX_MANUFACTURER				= 'Box.Manufacturer'					|
	BOARD_MANUFACTURER			= 'Board.Manufacturer'				|
	BOARD_BOARDTYPE				= 'Board.Type'						|
	BOARD_POWERSUPPLY			= 'Board.PowerSupply'				|
	BOARD_ASSURANCELEVEL			= 'Board.DesignAssuranceLevel'		|
	PROCESSOR_MANUFACTURER		= 'Processor.Manufacturer'			|
	PROCESSOR_PROCESSORTYPE		= 'Processor.Type'					|
	CORE_ARCHITECTURE			= 'Core.Architecture'
;


/* Exploration Candidates */
/* ********************** */
ExplorationCandidate returns ExplorationCandidate:
	'Candidate' name=ID '{'
		('Boards' 		'=' boardAlternatives+=[BoardAlternative] 				(',' boardAlternatives+=[BoardAlternative])* 				';')?
		('Applications' '=' applicationAlternatives+=[ApplicationAlternative] 	(',' applicationAlternatives+=[ApplicationAlternative])* 	';')?
		('Restrictions' '=' restrictionAlternatives+=[RestrictionAlternative] 	(',' restrictionAlternatives+=[RestrictionAlternative])* 	';')?
	'}' 
;

/* Generic Stuff */
/* ************* */

MetricParameter returns MetricParameter:  
	name=STRING '=' value=INT ';'
;

QualifiedName:
	ID ('.' ID)*
;

/* ENUMS */
/* ***** */

enum HardwareArchitectureLevelType returns HardwareArchitectureLevelType:
	CORE 		= 'Core'		|
	PROCESSOR 	= 'Processor'	|
	BOARD		= 'Board'		|
	BOX			= 'Box'			|
	COMPARTMENT	= 'Compartment'
;

enum DesignAssuranceLevelType returns DesignAssuranceLevelType: 
	NONE= 'None' 	|
	QS	= 'QS'	 	|
	D	= 'D'		|
	C	= 'C'		|
	B	= 'B'		|
	A 	= 'A'  
;

enum IOAdapterType returns IOAdapterType:
	CAN 		= 'Can'					|
	ELB			= 'Enhanced Local Bus'	|
	ETH			= 'Ethernet'			|
	ANALOG 		= 'Analog'				|
	DIGITAL		= 'Digital'				|
	SERIAL		= 'Serial'				;

