grammar ch.hilbri.assist.mappingdsl.MappingDSL with org.eclipse.xtext.common.Terminals

import "ch.hilbri.assist.datamodel.model"

AssistModel: 
	'Global'  '{' 
		'Name' '=' systemName=STRING ';' 
	'}'

	compartments+=Compartment+

	('Interfaces' '{'
		(eqInterfaces+=EqInterface)+ 
	'}')?
	
	('InterfaceGroups' '{'
		(
			eqInterfaceGroups+=EqInterfaceGroup 						|	
			eqInterfaceGroups+=EqInterfaceGroupWithCombinedDefinition
		)*		
	'}')?
	
	('Restrictions' '{'
		( 
			dislocalityRelations+=DislocalityRelation 			|
			colocalityRelations+=ColocalityRelation				|
			validDeployments+=ValidDeployment					|		 
			invalidDeployments+=InvalidDeployment 			 
		)*
		
	'}')?
;

Compartment: 
	'Compartment' name=ID '{'
		(
			('Manufacturer' 			'=' manufacturer=STRING ';')?  					&
			('PowerSupply' 				'=' powerSupply=STRING ';')?					&
			('Side' 					'=' side=STRING ';')?							&
			('Zone' 					'=' zone=STRING ';')?							&
			rdcs+=RDC+															
		)
	'}'
;

RDC:
	'RDC' name=ID '{'
		(
			('Manufacturer' 			'=' manufacturer=STRING ';')?					&
			('PowerSupply' 				'=' powerSupply=STRING ';')?					&
			('Type' 					'=' rdcType=STRING ';')?						&
			('ESS'		 				'=' ess=STRING ';')?							&
			connectors+=Connector+
		)													
	'}'
;

Connector:
	'Connector' name=ID '{'
		(availableEqInterfaces+=AvailableEqInterface)*
	'}'
;

AvailableEqInterface:
	eqInterfaceType=STRING '=' count=INT ';'
;


/* SOFTWARE */

EqInterfaceGroup: 
	'Group' name=ID '{' 
						(
							eqInterfaces+=[EqInterface] |
							implicitMemberDefinitions+=ImplicitEqInterfaceMemberDefinition
						)	
						(
							',' (
									eqInterfaces+=[EqInterface] |
									implicitMemberDefinitions+=ImplicitEqInterfaceMemberDefinition
								)
						)* 
						'}' ';';


ImplicitEqInterfaceMemberDefinition:
	'interfaces with' entries+=ImplicitEqInterfaceMemberDefinitionAttributesAndValues ('and' entries+=ImplicitEqInterfaceMemberDefinitionAttributesAndValues)*
;

ImplicitEqInterfaceMemberDefinitionAttributesAndValues:  
	attribute=ImplicitEqInterfaceMemberDefinitionAttribute '=' value=STRING
;

enum ImplicitEqInterfaceMemberDefinitionAttribute:
	NAME		= 'Name'			|
	SYSTEM	 	= 'System'			|
	SUBATA 	 	= 'SubAta'			|
	RESOURCE	= 'Resource'		|
	LINENAME	= 'LineName'		|
	WIRINGLANE	= 'WiringLane'		|
	GRPINFO		= 'GrpInfo'			|
	ROUTE		= 'Route'			|
	PWSUP1		= 'PwSup1'			|
	EMHZONE1	= 'EmhZone1'		|
	IOTYPE		= 'Type'
;

EqInterfaceGroupWithCombinedDefinition: 
	'Group' name=ID 'combines' combinedGroups+=[EqInterfaceGroup] ('and' combinedGroups+=[EqInterfaceGroup])* ';'	
;

EqInterface:
	'Interface' name=ID '{'
		(
			('System' 			'=' system=STRING 		';')?			&
			('SubAta' 			'=' subAta=STRING 		';')?			&
			('Resource'			'=' resource=STRING 	';')?			&
			('LineName'			'=' lineName=STRING 	';')?			&
			('WiringLane'		'=' wiringLane=STRING 	';')?			&
			('GrpInfo'			'=' grpInfo=STRING 		';')?			&
			('Route'			'=' route=STRING 		';')?			&
			('PwSup1'			'=' pwSup1=STRING 		';')?			&
			('EmhZone1'			'=' emhZone1=STRING 	';')?			&
			('Type'				'=' ioType=STRING 		';')?
		)
	'}';


/* RELATIONEN */

enum HardwareArchitectureLevelType :
	COMPARTMENT = 'Compartment' |
	RDC			= 'RDC'			|
	CONNECTOR	= 'Connector'
;

DislocalityRelation:
	eqInterfaceOrGroups+=[EqInterfaceOrGroup] (',' eqInterfaceOrGroups+=[EqInterfaceOrGroup])* 'dislocal up to' hardwareLevel=HardwareArchitectureLevelType ';';
	
	
ColocalityRelation:
	eqInterfaceOrGroups+=[EqInterfaceOrGroup] (',' eqInterfaceOrGroups+=[EqInterfaceOrGroup])*  'on same' hardwareLevel=HardwareArchitectureLevelType ';'
;	

ValidDeployment:
	'Valid for' eqInterfaceOrGroups+=[EqInterfaceOrGroup] (',' eqInterfaceOrGroups+=[EqInterfaceOrGroup])* 
	('is'|'are') '{'
		  ( 	 hardwareElements+=[HardwareElement|QualifiedName] | implicitHardwareElements+=DeploymentImplicitDefinition) 
		  (',' 	(hardwareElements+=[HardwareElement|QualifiedName] | implicitHardwareElements+=DeploymentImplicitDefinition) )* 
	'}' ';'
;

InvalidDeployment:
	'Invalid for' eqInterfaceOrGroups+=[EqInterfaceOrGroup] (',' eqInterfaceOrGroups+=[EqInterfaceOrGroup])* 
	('is'|'are') '{'
		  ( 	hardwareElements+=[HardwareElement|QualifiedName] | implicitHardwareElements+=DeploymentImplicitDefinition) 
		  (',' (hardwareElements+=[HardwareElement|QualifiedName] | implicitHardwareElements+=DeploymentImplicitDefinition) )* 
	'}' ';'
;

DeploymentImplicitDefinition:
	'connectors with' entries+=DeploymentImplicitDefinitionAttributeAndValue ('and' entries+=DeploymentImplicitDefinitionAttributeAndValue)*
;

DeploymentImplicitDefinitionAttributeAndValue:
   attribute=DeploymentImplicitDefinitionAttribute '=' value=STRING	 
;

enum DeploymentImplicitDefinitionAttribute:
	COMPARTMENT_NAME			= 'Compartment.Name'			|
	COMPARTMENT_MANUFACTURER 	= 'Compartment.Manufacturer' 	|
	COMPARTMENT_POWERSUPPLY 	= 'Compartment.PowerSupply' 	|
	COMPARTMENT_SIDE		 	= 'Compartment.Side'		 	|
	COMPARTMENT_ZONE		 	= 'Compartment.Zone'		 	|
	RDC_NAME					= 'RDC.Name'					|
	RDC_MANUFACTURER 			= 'RDC.Manufacturer'			|
	RDC_POWERSUPPLY 			= 'RDC.PowerSupply'				|
	RDC_SIDE 					= 'RDC.Side'					|
	RDC_TYPE 					= 'RDC.Type'					|
	RDC_ESS	 					= 'RDC.ESS'						|
	CONNECTOR_NAME				= 'Connector.Name'
;

/* MISC */
MetricParameter:  
	name=STRING '=' value=INT ';'
;

QualifiedName:
	ID ('.' ID)*
;


/* OLD STUFF */

/* 
DissimilarityRelation: 
	applicationsOrGroups+=[ApplicationOrApplicationGroup] (',' applicationsOrGroups+=[ApplicationOrApplicationGroup])+
	'dissimilar based on'
	dissimilarityClause=DissimilarityClause ';'
;

DissimilarityClause:  
	DissimilarityEntry | ( '(' (=>DissimilarityDisjunction | DissimilarityConjunction) ')' ) // Der Pfeil ist wichtig!
;

DissimilarityDisjunction: 
	dissimilarityClauses+=DissimilarityClause ( 'OR' dissimilarityClauses+=DissimilarityClause)+ ;

DissimilarityConjunction: 
	dissimilarityClauses+=DissimilarityClause ( 'AND' dissimilarityClauses+=DissimilarityClause)+ ;

DissimilarityEntry: 
	( 'Compartment.' compartmentAttribute= CompartmentAttributes ) 	|
	( 'Box.' boxAttribute = BoxAttributes) 							|
	( 'Board.' boardAttribute = BoardAttributes)					|
	( 'Processor.' processorAttribute = ProcessorAttributes)
;

enum CompartmentAttributes :
	MANUFACTURER 	= 'Manufacturer' 	| 
	POWERSUPPLY	 	= 'PowerSupply' 	| 
	SIDE 		 	= 'Side' 			| 
	ZONE		 	= 'Zone';
	
enum BoxAttributes :
	MANUFACTURER 	= 'Manufacturer';
	
enum BoardAttributes:
	MANUFACTURER 	= 'Manufacturer' 			|
	POWERSUPPLY 	= 'PowerSupply'				|
	ASSURANCELEVEL 	= 'DesignAssuranceLevel' 	|
	BOARDTYPE 		= 'Type'	       			|
	ESS				= 'ESS'						|
	SIDE			= 'Side'; 	

enum ProcessorAttributes:
	MANUFACTURER 	= 'Manufacturer' 	| 
	PROCESSORTYPE	= 'ProcessorType' 
;
*/
