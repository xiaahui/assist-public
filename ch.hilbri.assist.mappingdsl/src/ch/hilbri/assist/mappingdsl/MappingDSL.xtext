grammar ch.hilbri.assist.mappingdsl.MappingDSL with org.eclipse.xtext.common.Terminals

import "ch.hilbri.assist.datamodel.model"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AssistModel: 
	(
		globalBlock				= GlobalBlock				&
		compartmentsBlock		= CompartmentsBlock			&
		interfacesBlock			= InterfacesBlock			&
		(interfaceGroupsBlock	= InterfaceGroupsBlock)?	&
		(restrictionsBlock		= RestrictionsBlock)?
	)
;

/* ************************************************************
 * GLOBAL BLOCK
   ************************************************************ */

GlobalBlock: {GlobalBlock}
		'Global'  '{' 
		(
			('Name' '=' systemName=STRING ';'						)?		&
			( compatibleIoTypesBlock	= CompatibleIoTypesBlock	)?		&
			( cableWeightDataBlock		= CableWeightDataBlock		)?		&
			( protectionLevelDataBlock	= ProtectionLevelDataBlock	)?
		)  
		'}'
;

CompatibleIoTypesBlock: 
	'Compatible Interface Types' 	'{'	(compatibleIoTypes+=CompatibleIoTypeEntry)+ '}'	
;

CompatibleIoTypeEntry: 
	eqInterfaceIoType=STRING '->' pinInterfaceIoTypes+=STRING (',' pinInterfaceIoTypes+=STRING)* ';'
;

CableWeightDataBlock: 
	'Cable Weights' 				'{'	(cableWeightEntries+=CableWeightEntry)+  	'}'	
;

CableWeightEntry:
	(eqInterfaceIoType=STRING | defaultEntry?='default') '=' weight=Double ';'
;

ProtectionLevelDataBlock: 
	'Protection Level Restrictions'	'{' (protectionLevelEntries+=ProtectionLevelEntry)+	'}'	
;

ProtectionLevelEntry: 
	'RDC.Location' '=' rdcLocation=STRING 'And' 'Equipment.EmhZone1' '=' emhZone1=STRING '->' protectionLevel+=ProtectionLevelType (',' protectionLevel+=ProtectionLevelType)* ';'
;


/* ************************************************************
 * COMPARTMENTS
   ************************************************************ */

CompartmentsBlock: {CompartmentsBlock}
	'Compartments' '{'
		compartments+=Compartment+
	'}'
;

Compartment: 
	'Compartment' name=ID '{'
		(
			('Manufacturer' 			'=' manufacturer=STRING ';')?  					&
			('PowerSupply' 				'=' powerSupply=STRING ';')?					&
			('Side' 					'=' side=STRING ';')?							&
			('Zone' 					'=' zone=STRING ';')?							&
			(rdcs+=RDC+)																
		)
		(metricParametersBlock=MetricParametersBlock)?
	'}'
;

RDC:
	'RDC' name=ID '{'
		(
			('Manufacturer' 			'=' manufacturer=STRING ';')?					&
			('PowerSupply1'				'=' powerSupply1=STRING ';')?					&
			('PowerSupply2'				'=' powerSupply2=STRING ';')?					&
			('Type' 					'=' rdcType=STRING ';')?						&
			('ESS'		 				'=' ess=STRING ';')?							&
			('Location'					'=' location=STRING ';')?						&
			('ResourceX'				'=' resourceX=SIGNEDINT ';')?					&
			('ResourceY'				'=' resourceY=SIGNEDINT ';')?					&
			('ResourceZ'				'=' resourceZ=SIGNEDINT ';')?					&
			(internalConnectedPinBlock=InternalConnectedPinBlock)?						&
			(connectors+=Connector)+													
		)		
		(metricParametersBlock=MetricParametersBlock)?																		
	'}'
;

InternalConnectedPinBlock: {InternalConnectedPinBlock}
	'Connected Pins' '{' 
		(connectedPins+=ConnectedPinEntry)*	
	'}'
;

ConnectedPinEntry: 
	pins+=[Pin|QualifiedName] (',' pins+=[Pin|QualifiedName])+	 'are connected' ';' 
;

Connector:
	'Connector' name=ID '{'
		(pins+=Pin)*	
		(metricParametersBlock=MetricParametersBlock)?
	'}'
;

Pin:
	name=ID ':' eqInterfaceType=STRING ('protection level' protectionLevel=ProtectionLevelType)? ';'
;


enum ProtectionLevelType:
	NONE	= 'None'	|
	L1		= 'L1'		|
	L2		= 'L2'		|
	L3		= 'L3'		|
	L4		= 'L4'		|
	L5		= 'L5'		|
	L6		= 'L6'		|
	L7		= 'L7'		|
	L8		= 'L8'		
;

MetricParametersBlock: 
	'Metric Parameters' '{'
		metricParameters+=MetricParameter
	'}'	
;

MetricParameter:  
	name=STRING '=' value=INT ';'
;

/* ************************************************************
 * INTERFACES
   ************************************************************ */

InterfacesBlock: 
	'Interfaces' '{'
		(eqInterfaces+=EqInterface)+ 
	'}'
;

EqInterface:
	'Interface' name=ID '{'
		(
			('System' 			'=' system=STRING 		';')?			&
			('SubAta' 			'=' subAta=STRING 		';')?			&
			('Resource'			'=' resource=STRING 	';')?			&
			('LineName'			'=' lineName=STRING 	';')?			&
			('WiringLane'		'=' wiringLane=STRING 	';')?			&
			('GrpInfo'			'=' grpInfo=STRING 		';')?			&
			('Route'			'=' route=STRING 		';')?			&
			('PwSup1'			'=' pwSup1=STRING 		';')?			&
			('EmhZone1'			'=' emhZone1=STRING 	';')?			&
			('Type'				'=' ioType=STRING 		';')?			&
			('ResourceX'		'=' resourceX=SIGNEDINT	';')?			&
			('ResourceY'		'=' resourceY=SIGNEDINT	';')?			&
			('ResourceZ'		'=' resourceZ=SIGNEDINT	';')?			
		)
	'}';


/* ************************************************************
 * INTERFACE GROUPS
 * ************************************************************ */

InterfaceGroupsBlock: {InterfaceGroupsBlock} 
	'InterfaceGroups' '{'
		(
			eqInterfaceGroups+=EqInterfaceGroup 						|	
			eqInterfaceGroups+=EqInterfaceGroupWithCombinedDefinition
		)*		
	'}'
;


EqInterfaceGroup: 
	'Group' name=ID '{' 
						(
							eqInterfaces+=[EqInterface] |
							implicitMemberDefinitions+=ImplicitEqInterfaceMemberDefinition
						)	
						(
							',' (
									eqInterfaces+=[EqInterface] |
									implicitMemberDefinitions+=ImplicitEqInterfaceMemberDefinition
								)
						)* 
												
						'}'
						
					(
						'without' '{' 
						(
							withoutEqInterfaces+=[EqInterface] |
							withoutImplicitMemberDefinitions+=ImplicitEqInterfaceMemberDefinition
						)	
						(
							',' (
									withoutEqInterfaces+=[EqInterface] |
									withoutImplicitMemberDefinitions+=ImplicitEqInterfaceMemberDefinition
								)
						)* 
												
						'}'
					)?	
						
				 ';';


ImplicitEqInterfaceMemberDefinition:
	'interfaces with' entries+=ImplicitEqInterfaceMemberDefinitionAttributesAndValues ('and' entries+=ImplicitEqInterfaceMemberDefinitionAttributesAndValues)*
;

ImplicitEqInterfaceMemberDefinitionAttributesAndValues:  
	attribute=ImplicitEqInterfaceMemberDefinitionAttribute '=' value=STRING
;

enum ImplicitEqInterfaceMemberDefinitionAttribute:
	NAME		= 'Name'			|
	SYSTEM	 	= 'System'			|
	SUBATA 	 	= 'SubAta'			|
	LINENAME	= 'LineName'		|
	WIRINGLANE	= 'WiringLane'		|
	GRPINFO		= 'GrpInfo'			|
	ROUTE		= 'Route'			|
	PWSUP1		= 'PwSup1'			|
	EMHZONE1	= 'EmhZone1'		|
	IOTYPE		= 'Type'			|
	RESOURCE	= 'Resource'		|
	RESOURCE_X  = 'ResourceX'		|
	RESOURCE_Y  = 'ResourceY'		|
	RESOURCE_Z  = 'ResourceZ'		
;

EqInterfaceGroupWithCombinedDefinition: 
	'Group' name=ID 'combines' combinedGroups+=[EqInterfaceGroup] ('and' combinedGroups+=[EqInterfaceGroup])+ ';'	
;


/* ************************************************************
 * RESTRICTIONS
 * ************************************************************ */

RestrictionsBlock: {RestrictionsBlock}
	'Restrictions' '{'
		( 
			dislocalityRelations	+= DislocalityRelation 			|
			colocalityRelations		+= ColocalityRelation			|
			validDeployments		+= ValidDeployment				|		 
			invalidDeployments		+= InvalidDeployment 			 
		)* 
	'}'
;

enum HardwareArchitectureLevelType :
	COMPARTMENT = 'Compartment' |
	RDC			= 'RDC'			|
	CONNECTOR	= 'Connector'
;

DislocalityRelation:
	eqInterfaceOrGroups+=[EqInterfaceOrGroup] 
	(',' eqInterfaceOrGroups+=[EqInterfaceOrGroup])* 
	'dislocal up to' 
	hardwareLevel=HardwareArchitectureLevelType ';';
	
	
ColocalityRelation:
	eqInterfaceOrGroups+=[EqInterfaceOrGroup] 
	(',' eqInterfaceOrGroups+=[EqInterfaceOrGroup])*  
	'on same' 
	hardwareLevel=HardwareArchitectureLevelType ';'
;	

ValidDeployment:
	'Valid for' eqInterfaceOrGroups+=[EqInterfaceOrGroup] 
	(',' eqInterfaceOrGroups+=[EqInterfaceOrGroup])* 
	'are' '{'
		  ( 	 hardwareElements+=[HardwareElement|QualifiedName] | implicitHardwareElements+=DeploymentImplicitDefinition) 
		  (',' 	(hardwareElements+=[HardwareElement|QualifiedName] | implicitHardwareElements+=DeploymentImplicitDefinition) )* 
	'}' ';'
;

InvalidDeployment:
	'Invalid for' eqInterfaceOrGroups+=[EqInterfaceOrGroup] 
	(',' eqInterfaceOrGroups+=[EqInterfaceOrGroup])* 
	'are' '{'
		  ( 	hardwareElements+=[HardwareElement|QualifiedName] | implicitHardwareElements+=DeploymentImplicitDefinition) 
		  (',' (hardwareElements+=[HardwareElement|QualifiedName] | implicitHardwareElements+=DeploymentImplicitDefinition) )* 
	'}' ';'
;

DeploymentImplicitDefinition:
	'connectors with' entries+=DeploymentImplicitDefinitionAttributeAndValue 
	('and' entries+=DeploymentImplicitDefinitionAttributeAndValue)*
;

DeploymentImplicitDefinitionAttributeAndValue:
   attribute=DeploymentImplicitDefinitionAttribute '=' value=STRING	 
;

enum DeploymentImplicitDefinitionAttribute:
	COMPARTMENT_NAME			= 'Compartment.Name'			|
	COMPARTMENT_MANUFACTURER 	= 'Compartment.Manufacturer' 	|
	COMPARTMENT_POWERSUPPLY 	= 'Compartment.PowerSupply' 	|
	COMPARTMENT_SIDE		 	= 'Compartment.Side'		 	|
	COMPARTMENT_ZONE		 	= 'Compartment.Zone'		 	|
	
	RDC_NAME					= 'RDC.Name'					|
	RDC_MANUFACTURER 			= 'RDC.Manufacturer'			|
	RDC_POWERSUPPLY1 			= 'RDC.PowerSupply1'			|
	RDC_POWERSUPPLY2 			= 'RDC.PowerSupply2'			|
	RDC_SIDE 					= 'RDC.Side'					|
	RDC_TYPE 					= 'RDC.Type'					|
	RDC_ESS	 					= 'RDC.ESS'						|
	RDC_RESOURCE_X				= 'RDC.ResourceX'				|
	RDC_RESOURCE_Y				= 'RDC.ResourceY'				|
	RDC_RESOURCE_Z				= 'RDC.ResourceZ'				|
	
	CONNECTOR_NAME				= 'Connector.Name'
;


/* ************************************************************
 * RESTRICTIONS
 * ************************************************************ */

Double returns ecore::EDouble:
    INT '.' INT
;

QualifiedName:
	ID ('.' ID)*
;

SIGNEDINT returns ecore::EInt:
  '-'? INT;
